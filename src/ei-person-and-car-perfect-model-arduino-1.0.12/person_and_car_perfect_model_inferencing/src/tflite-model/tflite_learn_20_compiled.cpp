/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 27.12.2024 18:40:05

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 238608;
#else
constexpr int kTensorArenaSize = 237584;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data2[3] = { 18307, -33872, -31295, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00030312538729049265, 0.00016047334065660834, 0.00017553041107021272, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ -82,26,65,-54,-60,37,127,-40,-2,10,11,-13,-10,-47,98,10,-23,114,52,68,0,-14,54,-7,-47,71,-24,13,58,11,17,4, 
  /* [1][0][][] */ 26,-17,-46,35,9,86,-12,8,127,-10,4,-41,-33,108,39,-26,93,-33,15,-72,-74,35,113,56,27,31,21,-34,-97,-19,39,2, 
  /* [2][0][][] */ -50,54,-44,55,74,-43,-127,93,81,52,87,23,-61,-52,26,94,-52,-45,14,-86,77,85,-33,-57,73,-20,6,-79,-4,-44,72,2, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0068885404616594315, 0.003646765137091279, 0.0039889379404485226, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data4[32] = { -116, 773, -1279, 494, 316, -531, 904, 704, 759, -1432, 313, -1628, -1605, -36, 762, 454, -162, 490, -1034, -1017, -2050, 851, 566, -683, 161, -1474, -1344, -1279, 1502, -1604, 388, -1563, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 6.5603882831055671e-05, 6.1161714256741107e-05, 6.4727442804723978e-05, 6.9252790126483887e-05, 6.53944953228347e-05, 5.5972843256313354e-05, 0.0001343412441201508, 6.5755360992625356e-05, 7.8256649430841208e-05, 6.7883891460951418e-05, 9.3098373326938599e-05, 6.689557631034404e-05, 6.2606253777630627e-05, 7.8172291978262365e-05, 8.0107653047889471e-05, 7.1523994847666472e-05, 6.1605765949934721e-05, 9.1018657258246094e-05, 6.7392829805612564e-05, 5.8533656556392089e-05, 5.8161258493782952e-05, 5.9402889746706933e-05, 9.2617883638013154e-05, 7.3207767854910344e-05, 9.0684698079712689e-05, 6.6011285525746644e-05, 6.7677494371309876e-05, 6.4988882513716817e-05, 0.00011037361400667578, 5.8371228078613058e-05, 0.00011217650171602145, 6.7115906858816743e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -10,-80,127,-55,90,11,-88,-84,21,-86,-88,37,27,2,-65,26,-38,-61,-85,-125,-60,-118,5,93,-5,-6,56,-30,65,-32,-44,-28,61,-33,-93,29,-102,-83,-101,59,97,-75,-100,40,41,-114,75,-27, 
  /* [1][0][][] */ -52,51,-112,18,-24,80,-14,25,72,-73,-127,68,69,-63,38,46,68,1,-17,117,-23,-26,18,7,-28,45,-72,104,3,14,45,-67,71,86,-24,4,68,50,3,-74,-103,22,-19,-116,-26,56,-18,-31, 
  /* [2][0][][] */ 4,-3,-80,48,-49,-82,123,49,-113,41,-52,67,44,52,37,-127,-76,-58,7,18,-114,-43,63,-10,-46,37,50,-26,-87,32,114,47,-90,-49,-102,-118,-102,47,58,-53,-122,-96,-21,-8,-102,69,-53,-98, 
  /* [3][0][][] */ 92,27,-13,2,-37,64,-98,47,61,35,44,30,80,70,70,39,56,127,-71,15,119,-64,-53,-87,0,-33,-60,107,26,-49,66,19,-19,-15,-9,3,-76,12,52,68,-26,-56,-55,-7,73,48,-15,-50, 
  /* [4][0][][] */ 61,116,-66,65,-12,-8,-32,23,63,90,-60,47,30,-68,3,-40,-70,57,-127,18,115,-96,45,5,-30,51,33,-34,-62,48,-95,-49,79,91,-8,-92,-45,11,-75,45,-88,-39,-33,-119,30,114,43,60, 
  /* [5][0][][] */ 64,-121,69,71,25,-120,-4,40,83,-127,-28,-65,6,67,15,43,52,22,-75,85,10,23,-12,-41,-90,-65,-34,-116,41,0,-11,-107,-54,-8,-94,-5,-120,-64,37,4,-111,-71,12,62,-54,20,-3,-77, 
  /* [6][0][][] */ -54,4,127,36,-20,-30,72,40,-25,-29,100,-62,70,75,73,-50,110,-14,54,44,-54,-29,65,32,5,-10,51,-43,56,-19,43,52,-49,-11,-7,-27,39,-5,-57,-8,21,32,16,42,-36,4,-62,-23, 
  /* [7][0][][] */ 113,84,-91,-13,-45,107,-67,16,108,23,-112,12,57,-107,55,82,10,65,-53,105,71,19,-18,59,-120,127,15,63,-81,108,-38,29,44,19,43,74,-78,86,13,-22,37,-46,87,34,51,26,100,-74, 
  /* [8][0][][] */ 45,30,-48,-59,67,54,-115,6,13,48,25,103,9,-62,-58,-27,-64,90,-54,1,48,-38,65,100,-64,96,14,86,-48,41,-95,102,88,1,27,-29,85,22,4,90,80,84,-127,-104,16,-1,5,92, 
  /* [9][0][][] */ -23,9,45,36,40,-95,-57,-127,14,7,-52,6,-47,-63,-74,-14,-33,-4,-118,-52,-15,83,-122,-127,44,-20,-6,-3,-38,-55,-76,37,31,-26,2,-22,-102,-1,-52,-57,-1,-76,64,-120,41,0,-99,30, 
  /* [10][0][][] */ -21,50,35,-36,0,84,32,27,22,27,-14,-28,59,21,-28,8,-35,80,-99,-28,8,-1,26,-57,0,59,-127,-70,-43,30,-82,-44,60,60,51,26,-16,3,-27,23,-45,82,-62,-46,-62,-12,-13,-38, 
  /* [11][0][][] */ 47,-31,-48,50,55,4,30,-13,52,36,-103,48,-47,-39,-9,-83,-82,-125,21,-1,-16,25,-23,-127,-119,-116,-50,17,26,-42,25,-56,-113,-100,10,-1,-88,23,-59,-90,-62,44,-94,-37,-75,-84,-108,-113, 
  /* [12][0][][] */ -30,30,-81,-30,37,-27,-52,-8,-102,14,-51,-29,-77,-1,13,-97,-119,-67,-76,-97,-16,-45,-26,43,-90,-74,56,-127,47,-21,-37,64,-113,-100,-81,-23,-38,-104,-53,-4,59,-3,-124,-73,-58,-107,-75,62, 
  /* [13][0][][] */ 96,-85,99,18,75,99,36,44,24,-70,30,25,53,53,3,-43,-68,-94,-29,-46,39,-65,90,-14,11,10,8,22,-51,-83,10,59,16,94,-33,-10,-66,-37,11,75,-5,36,-127,-9,-24,8,-17,-38, 
  /* [14][0][][] */ -28,-47,0,71,69,-18,-49,-61,-37,-6,-7,66,-13,-83,-60,-68,-51,-27,-14,24,-10,-5,-17,51,-127,-40,-52,43,-88,-41,-85,21,96,-6,-30,-31,75,88,55,-55,-28,-60,-63,26,57,-51,61,-36, 
  /* [15][0][][] */ 11,7,-98,81,75,-70,12,-62,56,11,-86,-21,93,-25,-48,-79,39,55,-127,37,55,12,41,60,-35,87,12,75,7,58,32,-94,21,-6,-52,-5,-37,93,99,-69,-42,100,-15,-35,21,-35,-20,-43, 
  /* [16][0][][] */ -43,-51,123,-114,47,127,-57,35,19,45,-68,118,-28,-29,-98,-51,100,14,100,-20,85,26,-20,78,39,17,-57,65,-78,-4,3,49,-109,91,37,15,-44,31,-57,-27,73,-63,-40,64,56,65,78,-31, 
  /* [17][0][][] */ -26,-43,40,45,-32,-127,12,-56,50,-62,58,-5,79,78,-29,47,43,-18,93,71,-78,23,25,-9,15,47,-29,-9,93,-6,11,39,-31,-18,53,31,-18,64,-90,-57,-40,-14,-1,17,15,-36,82,-42, 
  /* [18][0][][] */ -93,71,52,-68,-31,-89,-127,-17,-24,34,-77,-89,-57,-44,48,-38,-2,-19,26,-36,69,-33,-12,-100,-22,-61,-27,81,-3,20,5,19,20,-50,-105,-92,-53,16,-40,34,-68,-16,-54,-5,-106,-2,6,-13, 
  /* [19][0][][] */ -6,2,49,16,32,-98,99,64,72,-79,20,-32,-109,73,-66,36,49,-116,86,35,-41,69,-65,-2,48,-90,29,-84,-103,-125,-40,19,54,-100,42,3,-12,-55,-72,-100,23,-127,-93,12,-99,7,59,-103, 
  /* [20][0][][] */ -51,66,20,58,-125,41,-28,9,-4,-33,-106,-43,-52,3,40,-109,-90,-28,-97,-54,-10,-38,-118,-117,28,-72,-87,20,-27,1,-52,62,76,-3,-27,49,-8,-34,-48,-120,-127,-74,-62,-116,-66,-95,-71,90, 
  /* [21][0][][] */ 113,94,6,-78,108,-60,12,33,15,-39,-68,56,22,26,-31,-69,-127,18,12,-12,126,-37,68,-75,37,-27,-37,89,15,29,-8,-14,32,28,-74,-90,104,116,-85,-12,-35,25,17,-2,-70,-48,-49,106, 
  /* [22][0][][] */ 45,-57,-39,-74,72,-15,29,48,-62,67,-49,-29,69,-95,-94,-54,20,22,-75,-67,65,-84,37,42,78,-20,-93,79,-35,-43,-63,-46,36,56,2,-38,8,-13,-28,-36,34,3,-127,29,49,-66,52,-8, 
  /* [23][0][][] */ 35,-103,18,14,58,-127,-16,-94,13,-76,58,60,-2,-90,-21,-67,77,-58,-69,39,48,-99,57,-36,8,-43,61,-5,41,-4,28,-17,-49,25,-15,-18,59,-31,-102,-3,-82,-22,-22,-107,-71,-84,53,-9, 
  /* [24][0][][] */ -63,-32,-85,-43,-49,-104,-61,-54,13,73,24,28,63,10,-17,-127,-68,-9,3,-62,51,-65,-48,-15,23,-48,30,50,60,33,-19,-44,-6,-1,18,-8,-28,-85,47,-22,-53,-71,39,-18,16,-28,26,50, 
  /* [25][0][][] */ -98,-78,-84,-38,44,-95,-75,7,4,-125,-35,-4,32,-4,-127,-45,-87,19,5,-122,21,29,-40,-62,27,-57,-104,-2,38,-110,35,68,44,-121,0,19,46,-81,-48,-41,-92,44,-116,-10,46,7,17,-8, 
  /* [26][0][][] */ 11,-124,-42,-40,-108,-29,-25,-40,-116,-127,61,44,-91,-35,-13,-37,66,-6,-82,-83,-18,29,48,-7,23,33,-6,10,-16,-25,-97,-27,-53,-75,-103,-104,-80,36,-68,58,-104,52,19,-2,-88,32,-59,54, 
  /* [27][0][][] */ -16,-21,-81,-113,-127,-87,-26,-42,9,55,39,-109,-51,71,39,-53,26,-41,24,-93,-106,-19,-51,-48,-107,13,-118,-31,26,-5,5,-37,23,29,-104,-99,-102,-81,-122,45,-79,-13,-5,35,54,-7,30,58, 
  /* [28][0][][] */ 29,24,98,94,-46,-29,55,-6,9,-29,45,16,-12,-25,68,91,127,65,7,125,-4,99,-35,-39,-73,45,-46,-34,22,-9,57,-5,-39,6,72,98,77,-50,9,-22,46,62,15,73,-39,28,15,52, 
  /* [29][0][][] */ 9,18,16,-82,-116,-18,-90,-28,67,-50,-69,-124,68,-68,-71,-72,-127,60,19,-88,-106,-50,19,-24,-65,-3,-55,-61,-116,-36,118,-38,14,-31,-74,-57,-45,70,-44,55,18,64,-71,97,-33,64,-75,-59, 
  /* [30][0][][] */ -6,-25,-92,27,-45,12,-40,4,60,-2,-3,-42,-57,32,57,28,-3,-19,56,-55,15,-62,-69,22,-127,-22,-35,66,-6,-14,-29,-14,-38,-42,-48,-51,12,-25,12,2,47,-40,-61,57,59,-23,65,42, 
  /* [31][0][][] */ 28,-105,-3,53,5,20,-69,-114,-58,-51,-102,-108,45,-123,-64,60,-81,-103,2,13,17,0,-63,46,2,-122,4,-3,-91,-90,19,53,-20,-20,-110,-37,46,-62,-88,-127,10,-90,-53,-8,-32,-75,-66,-14, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0027881651185452938, 0.002599372761324048, 0.0027509161736816168, 0.0029432435985654593, 0.0027792658656835556, 0.0023788458202034235, 0.0057095028460025787, 0.0027946028858423233, 0.0033259075134992599, 0.0028850652743130922, 0.0039566806517541409, 0.0028430619277060032, 0.002660765778273344, 0.0033223223872482777, 0.0034045751672238111, 0.0030397695954889059, 0.0026182448491454124, 0.0038682927843183279, 0.002864195266738534, 0.002487680409103632, 0.0024718535132706165, 0.0025246227160096169, 0.0039362600073218346, 0.0031113300938159227, 0.0038540996611118317, 0.0028054795693606138, 0.0028762933798134327, 0.0027620275504887104, 0.0046908785589039326, 0.0024807772133499384, 0.0047675012610852718, 0.0028524259105324745, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data6[48] = { -821, 2100, 1881, 4527, 8911, -1126, -1514, 21210, 1158, 9208, 1577, -2276, 4527, -3368, 8953, -2742, 480, -1608, 1637, 4245, 4206, 1952, 5571, 645, -6064, -1847, 218, 2753, 2025, 3474, -1501, 3016, 5096, 4492, 3757, 974, 7638, 1680, 245, -2069, 1141, 7371, -992, 3955, 6901, -1501, 1342, 7340, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00018582747725304216, 0.00017206055053975433, 0.00016547097766306251, 0.00012084646732546389, 9.9945500551257282e-05, 0.00015640922356396914, 0.00019685072766151279, 3.8145506550790742e-05, 0.00020344204676803201, 7.376042049145326e-05, 0.00013522696099244058, 0.00022803094179835171, 0.00013469041732605547, 0.00017582364671397954, 8.3753708167932928e-05, 0.00013557152124121785, 0.00017021862731780857, 6.3439372752327472e-05, 0.00022251649352256209, 0.00014775412273593247, 0.00014535851369146258, 0.00019380707817617804, 0.00011277366138529032, 0.00024029855558183044, 0.00010883166396524757, 0.0002083855215460062, 0.00019150109437759966, 0.00019711848290171474, 0.00012970216630492359, 0.00016684134607203305, 0.0001306620251853019, 0.00014160532737150788, 0.00012990049435757101, 0.00015788417658768594, 9.3113907496444881e-05, 0.0001117853244068101, 0.00011632998939603567, 0.00015428522601723671, 0.00016813601541798562, 0.00016891895211301744, 0.00022440178145188838, 0.00011956756497966126, 0.00016166105342563242, 9.363882418256253e-05, 0.00011009996524080634, 0.00011124847515020519, 0.0001182302730740048, 8.8800385128706694e-05, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ 31,-5,-39,21,-127,57,-79,0, 
  /* [1][0][][] */ -127,50,78,15,-103,-17,-38,-16, 
  /* [2][0][][] */ 65,14,-61,-24,-57,-127,5,117, 
  /* [3][0][][] */ -96,36,-3,127,38,-61,-58,-19, 
  /* [4][0][][] */ 43,-26,23,-127,-24,9,-67,39, 
  /* [5][0][][] */ 95,127,-80,-73,-49,-2,-11,-66, 
  /* [6][0][][] */ 32,-58,36,127,-16,-106,20,-97, 
  /* [7][0][][] */ 127,96,-79,-124,-117,-43,54,-116, 
  /* [8][0][][] */ -5,-20,48,0,5,21,-51,-127, 
  /* [9][0][][] */ -83,0,-94,11,-127,-52,-86,-38, 
  /* [10][0][][] */ 95,2,84,-20,-109,-42,95,127, 
  /* [11][0][][] */ 127,-2,-39,0,40,19,-90,-20, 
  /* [12][0][][] */ -28,-102,127,4,20,-3,-86,91, 
  /* [13][0][][] */ 18,-33,106,43,47,-127,32,-110, 
  /* [14][0][][] */ -53,11,127,55,-16,-47,57,-20, 
  /* [15][0][][] */ 6,86,16,-2,-70,53,46,-127, 
  /* [16][0][][] */ -4,89,-57,91,33,-76,17,127, 
  /* [17][0][][] */ 86,97,-8,99,-79,56,-127,26, 
  /* [18][0][][] */ 35,-40,127,-16,53,-64,32,-47, 
  /* [19][0][][] */ 4,28,-24,127,47,-74,-68,-86, 
  /* [20][0][][] */ 13,20,-17,18,-32,64,-127,-1, 
  /* [21][0][][] */ 51,-30,68,65,56,127,66,-47, 
  /* [22][0][][] */ 82,-127,-12,38,-118,77,7,30, 
  /* [23][0][][] */ -42,-83,-18,-127,-6,-68,-10,-80, 
  /* [24][0][][] */ 28,21,-60,-88,-37,-127,-49,87, 
  /* [25][0][][] */ 100,96,127,18,32,-7,-78,19, 
  /* [26][0][][] */ -103,54,127,-39,-74,-13,71,-11, 
  /* [27][0][][] */ -63,27,-16,-106,5,127,-16,62, 
  /* [28][0][][] */ 22,-107,98,95,86,17,-15,127, 
  /* [29][0][][] */ -127,58,41,-27,-115,9,82,-38, 
  /* [30][0][][] */ 127,-116,36,104,-62,-12,68,-110, 
  /* [31][0][][] */ 88,59,80,-47,-125,-18,49,127, 
  /* [32][0][][] */ -44,9,69,-39,17,-1,-127,-62, 
  /* [33][0][][] */ 55,44,88,-127,24,37,-38,71, 
  /* [34][0][][] */ 98,-127,111,-3,100,113,107,-86, 
  /* [35][0][][] */ 36,32,123,58,43,127,68,-73, 
  /* [36][0][][] */ -19,21,-7,48,55,-127,11,-7, 
  /* [37][0][][] */ 16,-7,51,25,-127,115,-55,-23, 
  /* [38][0][][] */ -127,-9,-37,6,83,-25,-63,-30, 
  /* [39][0][][] */ 61,5,29,-127,-25,31,-79,25, 
  /* [40][0][][] */ 61,-19,-78,-127,38,51,31,-13, 
  /* [41][0][][] */ 55,-3,-11,127,-76,-27,-66,-23, 
  /* [42][0][][] */ -97,66,78,127,-68,-70,-56,-12, 
  /* [43][0][][] */ 123,-111,90,54,-112,-27,127,69, 
  /* [44][0][][] */ 5,-35,37,-96,-36,127,53,20, 
  /* [45][0][][] */ -50,56,-54,28,108,-83,-127,-42, 
  /* [46][0][][] */ -73,-122,-7,-32,11,127,-21,-126, 
  /* [47][0][][] */ -126,-93,-40,43,37,127,16,-67, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0023176849354058504, 0.0021459804847836494, 0.0020637938287109137, 0.0015072261448949575, 0.001246544299647212, 0.0019507732940837741, 0.0024551695678383112, 0.00047575990902259946, 0.0025373781099915504, 0.00091995764523744583, 0.0016865831566974521, 0.0028440565802156925, 0.0016798912547528744, 0.0021929147187620401, 0.0010445963125675917, 0.0016908805118873715, 0.0021230075508356094, 0.00079123111208900809, 0.0027752791065722704, 0.0018428248586133122, 0.0018129462841898203, 0.002417208394035697, 0.0014065401628613472, 0.0029970612376928329, 0.0013573745964094996, 0.0025990342255681753, 0.0023884475231170654, 0.0024585090577602386, 0.001617676462046802, 0.0020808852277696133, 0.0016296481480821967, 0.001766135566867888, 0.0016201501712203026, 0.0019691693596541882, 0.0011613389942795038, 0.0013942134100943804, 0.0014508955646306276, 0.0019242822891101241, 0.0020970327313989401, 0.0021067976485937834, 0.0027987929061055183, 0.0014912753831595182, 0.0020162754226475954, 0.0011678858427330852, 0.0013731932267546654, 0.0013875176664441824, 0.0014745963271707296, 0.0011075397487729788, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data8[8] = { 211, -3285, -8841, 9286, 15751, -10829, 13847, 5700, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00015289912698790431, 7.8390832641161978e-05, 8.6592059233225882e-05, 0.00011178602289874107, 9.2412497906479985e-05, 9.1106478066649288e-05, 0.0001440674823243171, 0.0001059652931871824, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 6,26,28,41,27,-33,34,38,0,18,10,-30,8,-16,49,-3,-35,-21,-127,11,16,-33,84,24,37,0,22,-10,13,-29,1,13,-33,35,40,-23,43,70,-32,-30,21,6,-80,-21,19,34,-42,-72, 
  /* [1][0][][] */ 3,-44,-4,42,-29,8,5,-19,32,6,-14,-34,-1,9,8,3,27,13,78,-53,3,23,7,-42,15,-8,-27,-35,-27,16,0,14,-29,-37,-112,94,11,24,-127,-27,37,-3,65,24,91,-26,-37,63, 
  /* [2][0][][] */ 5,-14,11,-31,-59,-38,-7,98,-7,49,-59,-13,127,5,42,-10,-28,-65,16,8,-20,-11,-40,22,-9,29,-4,42,4,1,84,19,-47,17,0,63,7,45,62,-117,34,28,-62,-43,-10,-1,14,-1, 
  /* [3][0][][] */ 18,-11,-123,-17,-20,-25,18,-20,17,-25,-19,16,-50,-33,-1,12,12,23,26,9,-53,19,-127,-17,-44,-52,62,65,-39,-59,-44,24,43,34,-42,39,-49,-17,25,-20,-8,-48,-30,13,27,-59,70,-1, 
  /* [4][0][][] */ 11,32,-19,32,30,-26,-106,-120,-16,59,-13,62,-21,-38,-22,53,38,41,-115,24,-11,-22,-33,-33,45,21,10,21,-2,-3,-30,-46,26,-46,-127,11,-20,-32,40,66,-67,-37,70,48,41,-35,41,14, 
  /* [5][0][][] */ -51,4,108,-11,62,36,82,-13,-127,-8,-99,-4,-27,-63,57,55,-24,44,32,11,59,21,33,28,-33,-16,-27,-57,-62,3,-8,-15,-26,27,65,25,-21,69,-30,-33,99,-38,-27,20,-17,19,-1,32, 
  /* [6][0][][] */ 95,25,-44,42,30,-60,-127,-58,43,16,21,47,-69,-32,-17,32,-30,16,3,4,84,-38,51,88,10,-34,30,14,-26,-22,-63,-60,39,-33,6,-28,2,26,-52,66,-80,-39,-91,-16,-6,-28,60,-23, 
  /* [7][0][][] */ -2,56,22,-54,73,-34,-60,-25,6,25,36,29,-59,-12,25,-9,-32,35,-44,75,-38,4,9,35,11,-29,7,14,2,35,-52,-36,54,-11,-5,-70,-54,23,127,12,16,-29,-7,-18,45,23,19,-19, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0064982129260897636, 0.0033316104672849178, 0.0036801623646169901, 0.0047509060241281986, 0.003927531186491251, 0.0038720252923667431, 0.006122867576777935, 0.0045035248622298241, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data10[48] = { 542, -3290, 2289, -1854, 1258, -197, 814, 8759, -3539, 10259, 17753, 1037, 5537, -11350, 3481, -204, -2388, 2821, 2764, -2344, -4440, -359, -7791, 2726, -4579, 6968, 2745, 437, -3444, 1857, 12169, -5821, -10474, 1825, -2184, -1513, 5520, 9203, -4691, 16599, 10874, -2612, -8987, -1757, -5372, 8360, 3730, 5918, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 9.1549103672150522e-05, 0.00025565491523593664, 0.00023158510157372802, 0.00021990202367305756, 0.0001390679826727137, 0.00062795582925900817, 0.00039173522964119911, 0.00046853191452100873, 0.00021019153064116836, 8.4123879787512124e-05, 9.9749566288664937e-05, 0.00019807060016319156, 0.00021976343123242259, 8.5833089542575181e-05, 0.00022823968902230263, 0.0001394024002365768, 0.00042501039570197463, 0.00019888047245331109, 0.00017241058230865747, 0.00025911678676493466, 0.00017978127289097756, 0.0013560611987486482, 0.00018420690321363509, 0.00023813478765077889, 0.00013400019088294357, 9.9734308605547994e-05, 0.00012382677232380956, 0.0001168072922155261, 0.00018253787129651755, 9.0173438366036862e-05, 0.00012030518701067194, 7.1119204221758991e-05, 0.00015377753879874945, 0.00016658629465382546, 0.00041828863322734833, 0.0002415221679257229, 0.00010875379666686058, 9.9859593319706619e-05, 0.00035241281148046255, 0.0001237675896845758, 0.00015545271162409335, 0.00024614148424006999, 0.00024251839204225689, 9.6361305622849613e-05, 0.0001933342864504084, 9.8580254416447133e-05, 0.00016126041009556502, 0.00016307068290188909, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 103,41,54,9,-115,-61,46,20,-108,32,-12,82,42,109,23,5,52,-64,62,51,68,-6,70,-9,-39,-127,-9,5,52,-99,-4,48,26,-116,-16,32,-30,73,-25,-78,-44,-26,-46,-44,7,-117,-45,-71, 48,11,43,-113,-31,84,25,-24,-127,-50,0,27,-10,13,-127,-31,-3,62,35,127,-7,127,24,13,116,-120,-15,-127,-127,48,-65,127,24,-86,-20,127,3,51,-65,-127,16,127,1,32,-51,-127,-12,-8, 122,10,58,-116,-32,-32,54,36,-98,-127,-108,38,26,120,12,-84,-46,-17,19,49,-27,-19,100,-17,-9,-120,-48,-25,-3,4,-59,66,66,-85,60,37,22,-123,12,-92,-47,-20,71,-45,-12,-78,-99,-21, 
  /* [0][1][][] */ 127,-1,20,127,83,29,-2,-127,69,22,-127,-56,6,79,-64,127,-127,53,34,47,29,57,92,-49,1,82,80,9,83,-65,-98,65,68,59,-87,-2,-127,-43,7,-79,-58,-13,-22,-127,32,46,41,-1, 5,127,-127,58,-62,43,-127,17,79,-4,-29,127,-127,127,-28,-31,49,-127,-127,17,71,35,-127,-127,-51,47,15,-52,-16,-47,53,-18,127,-27,63,-111,31,-100,127,89,127,52,-84,-8,51,55,-127,-6, 102,7,6,-105,127,28,2,-56,100,-94,-102,-38,3,38,-69,18,85,-27,13,12,26,-66,77,85,-24,88,-57,3,53,79,-80,60,24,28,63,-28,-25,-127,-35,0,-68,-34,127,107,127,17,49,-23, 
  /* [0][2][][] */ -46,40,12,80,58,-32,44,18,75,26,-60,-48,11,-77,82,-16,-2,10,68,-35,127,-13,19,-64,25,-98,64,121,56,-89,-127,40,12,105,-127,50,-97,5,-3,-24,-66,-44,46,-74,18,14,26,-37, -107,2,14,24,75,-127,16,-70,28,-8,-29,-110,-35,-48,3,4,11,-50,17,30,84,15,57,-24,127,-84,-49,50,-55,-45,-96,51,6,127,-30,42,-112,-109,31,-103,-107,26,76,-12,-13,-91,83,-35, 23,33,25,-6,124,-3,54,49,22,-77,1,-79,30,-57,82,-79,25,-42,65,-67,19,-39,-9,21,52,-80,-127,105,27,-127,-49,79,28,-28,16,-8,-67,-117,-22,-100,-78,-19,58,-14,6,3,47,-127, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.0038908368442207575, 0.010865333490073681, 0.00984236691147089, 0.0093458360061049461, 0.0059103891253471375, 0.026688123121857643, 0.016648747026920319, 0.019912606105208397, 0.0089331399649381638, 0.0035752647090703249, 0.0042393566109240055, 0.008418000303208828, 0.0093399453908205032, 0.0036479062400758266, 0.009700186550617218, 0.0059246020391583443, 0.01806294173002243, 0.0084524201229214668, 0.0073274495080113411, 0.011012463830411434, 0.0076407040469348431, 0.057632599025964737, 0.0078287934884428978, 0.010120728053152561, 0.0056950077414512634, 0.0042387079447507858, 0.0052626375108957291, 0.0049643097445368767, 0.0077578593045473099, 0.0038323712069541216, 0.0051129702478647232, 0.0030225659720599651, 0.0065355449914932251, 0.0070799174718558788, 0.017777265980839729, 0.010264691896736622, 0.004622036125510931, 0.0042440327815711498, 0.014977543614804745, 0.00526012247428298, 0.0066067399457097054, 0.010461012832820415, 0.010307031683623791, 0.0040953555144369602, 0.0082167070358991623, 0.0041896607726812363, 0.006853567436337471, 0.0069305039942264557, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data12[48] = { -1714, -3287, 2491, -1334, -3706, 1708, 2448, 30040, 2626, 7237, 9281, 4419, 820, 4658, 6319, -3185, 121358, 2541, 124, -3579, 286, -6124, -1193, 16685, 1622, 4824, 2946, -193, 4477, 348, 1963, -363, -1485, -1439, -3659, 833, 2703, 2199, 2810, 3149, 4046, 544, 5325, 6584, 19030, 4410, -483, 331, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.00019267034076619893, 0.00016293767839670181, 0.00019749440252780914, 0.00015461667499039322, 0.00012039561988785863, 0.00011295211152173579, 0.00019396109564695507, 4.3167947296751663e-05, 0.00013187850709073246, 0.00010580951493466273, 9.3953545729164034e-05, 0.00014185720647219568, 0.00029846158577129245, 0.00015004046144895256, 0.00012247092672623694, 0.00013453626888804138, 9.9095386758563109e-06, 0.00011852139141410589, 0.00030055546085350215, 0.00017532194033265114, 0.00010348393698222935, 9.1281304776202887e-05, 0.00023571228666696697, 5.3277184633770958e-05, 0.00016356173728127033, 0.00011537087993929163, 0.00019993484602309763, 0.00025544807431288064, 0.00010954320168821141, 0.00018307981372345239, 0.00017432050663046539, 0.00030971987871453166, 0.00024270142603199929, 0.00022608817380387336, 0.00011608082422753796, 0.0003125808434560895, 0.00020448651048354805, 0.00021166610531508923, 0.00019461123156361282, 0.00015500713197980076, 0.00015695483307354152, 0.00023046418209560215, 0.00017113654757849872, 0.00010519830539124086, 4.9646059778751805e-05, 0.00014467444270849228, 0.00019881791376974434, 0.00036554611870087683, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -15,-15,-26,127,-16,-45,-79,-126, 
  /* [1][0][][] */ 127,-21,45,-17,15,-59,6,28, 
  /* [2][0][][] */ -8,27,3,-127,46,88,-68,64, 
  /* [3][0][][] */ 1,127,-92,-116,-86,-10,18,-31, 
  /* [4][0][][] */ -20,-38,-127,-107,35,-82,-37,-126, 
  /* [5][0][][] */ 18,-102,116,96,31,87,127,-96, 
  /* [6][0][][] */ -41,8,-10,10,32,15,-127,-39, 
  /* [7][0][][] */ -8,-41,19,38,-19,53,127,57, 
  /* [8][0][][] */ -8,40,-85,-9,-9,-45,-127,66, 
  /* [9][0][][] */ 127,1,-101,-117,-2,113,-114,115, 
  /* [10][0][][] */ -37,125,87,86,97,127,-52,-75, 
  /* [11][0][][] */ -20,-71,-45,56,-127,-7,-62,-61, 
  /* [12][0][][] */ -61,3,73,-25,5,-34,-127,-32, 
  /* [13][0][][] */ 55,25,-36,-127,-1,-22,-34,88, 
  /* [14][0][][] */ -103,-55,2,2,85,20,12,-127, 
  /* [15][0][][] */ 29,98,110,108,123,127,-51,-106, 
  /* [16][0][][] */ 74,40,-1,-105,40,60,-30,127, 
  /* [17][0][][] */ -127,85,-105,66,-45,85,-102,72, 
  /* [18][0][][] */ -127,54,46,-5,-60,18,-33,-8, 
  /* [19][0][][] */ 127,-30,-56,-39,68,-50,74,-96, 
  /* [20][0][][] */ 127,-93,90,-4,-71,20,122,21, 
  /* [21][0][][] */ 29,-20,-14,49,-18,4,127,56, 
  /* [22][0][][] */ 93,41,-91,-127,-4,99,-3,98, 
  /* [23][0][][] */ -68,45,-79,-98,38,29,-127,-4, 
  /* [24][0][][] */ 94,-127,-121,-100,79,68,-69,27, 
  /* [25][0][][] */ -46,-91,29,-66,82,110,27,-127, 
  /* [26][0][][] */ 17,-69,84,96,76,-94,-79,-127, 
  /* [27][0][][] */ 6,-23,20,108,22,-34,-10,127, 
  /* [28][0][][] */ -32,44,-11,43,46,-126,44,127, 
  /* [29][0][][] */ -37,59,127,-27,40,-66,70,57, 
  /* [30][0][][] */ 42,-102,4,22,-43,-127,96,1, 
  /* [31][0][][] */ 25,39,34,-10,-25,-70,-127,22, 
  /* [32][0][][] */ 30,-31,43,127,-22,-97,-28,-74, 
  /* [33][0][][] */ 45,-24,-48,78,-127,60,-45,-42, 
  /* [34][0][][] */ -19,-127,16,8,-58,127,41,-54, 
  /* [35][0][][] */ -16,127,62,8,-24,15,-67,0, 
  /* [36][0][][] */ 25,75,-73,-127,-47,-19,41,2, 
  /* [37][0][][] */ 46,-15,7,-13,39,127,42,61, 
  /* [38][0][][] */ -53,-92,127,64,-17,15,-38,90, 
  /* [39][0][][] */ -35,62,127,-58,-8,113,-74,28, 
  /* [40][0][][] */ 28,24,-5,46,8,-40,127,34, 
  /* [41][0][][] */ -38,-36,-56,-127,-94,-50,-17,42, 
  /* [42][0][][] */ 19,-15,43,-58,-127,-46,-80,17, 
  /* [43][0][][] */ 77,-10,-9,-1,-48,-127,85,59, 
  /* [44][0][][] */ -63,-127,-26,-56,-14,25,-11,-122, 
  /* [45][0][][] */ 36,127,79,83,25,62,-32,70, 
  /* [46][0][][] */ -43,10,-9,44,91,2,-53,127, 
  /* [47][0][][] */ 38,75,-48,7,-8,15,16,-127, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.0027931442018598318, 0.002362109487876296, 0.00286307861097157, 0.0022414796985685825, 0.0017453767359256744, 0.0016374681144952774, 0.002811856335029006, 0.00062580622034147382, 0.0019118443597108126, 0.0015339218080043793, 0.0013620456447824836, 0.0020565055310726166, 0.0043268012814223766, 0.0021751383319497108, 0.0017754625296220183, 0.0019503738731145859, 0.00014365870447363704, 0.001718205981887877, 0.0043571558780968189, 0.0025416442658752203, 0.0015002078143879771, 0.0013233061181381345, 0.0034171238075941801, 0.00077235995559021831, 0.0023711563553661108, 0.0016725329915061593, 0.0028984579257667065, 0.003703233553096652, 0.0015880491118878126, 0.0026541103143244982, 0.0025271263439208269, 0.0044900127686560154, 0.0035184454172849655, 0.0032776028383523226, 0.001682825037278235, 0.0045314882881939411, 0.0029644432943314314, 0.003068526042625308, 0.0028212813194841146, 0.0022471402771770954, 0.0022753761149942875, 0.0033410419709980488, 0.0024809686001390219, 0.0015250610886141658, 0.00071971950819715858, 0.0020973470527678728, 0.0028822657186537981, 0.0052993264980614185, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data14[8] = { 9226, 8596, 17686, -1852, -14577, 12046, -3314, 16942, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 6.254037725739181e-05, 6.0203128668945283e-05, 8.9543122157920152e-05, 0.0001051264043780975, 7.50267572584562e-05, 8.7283864559140056e-05, 0.00012015752145089209, 7.7559627243317664e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 127,-23,-4,-23,-4,-86,-88,-14,72,-56,-24,-33,-8,88,-44,-12,37,4,-1,20,7,-32,8,-11,31,26,2,58,18,61,-26,-55,8,-74,-20,-14,43,-14,-1,5,-52,-23,-4,-44,-67,-69,0,-41, 
  /* [1][0][][] */ -100,-14,71,-61,47,27,72,16,-24,75,-28,95,13,-47,-127,-41,-109,-91,98,-13,25,94,-60,-5,45,-93,28,31,46,-99,15,14,18,63,-78,-32,-115,-79,36,55,17,-17,-70,80,-36,-59,-112,36, 
  /* [2][0][][] */ 64,42,-13,-60,-66,-1,30,-43,-39,31,-122,-22,-26,25,-75,49,-34,33,48,-11,63,42,3,15,-105,6,28,-93,-17,-9,34,-78,57,-17,19,5,-56,-61,14,48,-127,-99,-25,-44,-29,-74,19,17, 
  /* [3][0][][] */ 23,16,40,9,-127,-41,54,67,-47,-74,-52,87,8,-45,-111,-58,-25,-22,45,-62,-75,99,-9,-50,7,21,70,-53,16,35,66,3,49,22,69,66,53,74,47,-26,-5,-57,-29,-43,-6,14,23,19, 
  /* [4][0][][] */ -1,29,-116,15,-14,123,-75,45,-68,127,106,40,22,-79,-4,26,-50,18,2,45,-46,60,-120,33,-9,-14,112,55,70,20,106,124,-20,30,57,-52,-125,19,27,-64,26,31,50,38,83,31,18,80, 
  /* [5][0][][] */ -35,-10,12,2,48,-58,-31,-30,-5,-32,9,-38,31,3,5,17,10,9,-15,27,32,56,10,16,27,2,-33,-24,-34,-21,-127,-20,-46,1,-29,-37,-16,-36,-5,4,16,2,-20,2,15,14,-4,38, 
  /* [6][0][][] */ 29,56,20,25,-12,27,-54,55,-68,-40,34,18,46,17,24,-16,33,-38,-26,35,-39,31,30,-38,-77,-21,10,39,-42,19,-36,12,34,-23,-14,-3,127,21,-15,-73,17,21,24,-39,-39,1,-33,-15, 
  /* [7][0][][] */ -53,48,-79,5,3,-33,-103,-4,-101,-18,65,63,68,41,-56,-78,-73,77,35,-27,28,28,61,-66,-44,105,-46,-65,1,-71,-117,-1,-37,-22,-114,-7,11,-65,-39,-61,-10,62,127,22,-98,-74,108,-83, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0026579659897834063, 0.0025586329866200686, 0.003805582644417882, 0.0044678719714283943, 0.0031886370852589607, 0.0037095642182976007, 0.0051066945306956768, 0.0032962840050458908, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data16[48] = { 8652, 5977, 20447, 14842, 20927, -2476, -2396, -871, 755, -9529, -3180, -744, 12003, 7991, 8346, -764, 8269, 16154, 4264, -6378, 8265, -2518, 7601, 3035, 7557, 11397, -2097, 2639, -6305, 959, 11727, 1832, 3619, -5148, -2506, 1797, 3714, -7424, -7014, 1050, 5250, -5518, 3139, -4945, -7279, 4834, 10186, 2570, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00026314990827813745, 0.00020656136621255428, 4.628203168977052e-05, 5.0441038183635101e-05, 7.5166572059970349e-05, 0.0001341952447546646, 0.00019123560923617333, 0.00013853580458089709, 0.001083188340999186, 0.00020227735512889922, 0.00021203499636612833, 8.7972839537542313e-05, 0.00010760858276626095, 0.00013398019655141979, 0.00030140081071294844, 0.00012575129221659154, 0.00015695951879024506, 9.8801043350249529e-05, 0.00024808803573250771, 0.00014388600538950413, 0.00012531860556919128, 0.00015083811013028026, 0.00015034286479931325, 0.00015734565386082977, 0.00012918848369736224, 0.00011444628762546927, 0.00027907142066396773, 0.00020104090799577534, 0.00023073924239724874, 0.00023207106278277934, 0.0001269101194338873, 0.00030076890834607184, 0.00021110838861204684, 0.00020895274064969271, 0.0001603149576112628, 0.00022135289327707142, 0.00022146062110550702, 0.00017291800759267062, 7.4886425863951445e-05, 0.00025110295973718166, 0.00014946468581911176, 0.00016371319361496717, 0.00016688105824869126, 0.00024119015142787248, 0.00020707891962956637, 0.00028367264894768596, 9.481699817115441e-05, 0.00018947986245620996, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -127,-31,55,49,-102,6,-101,-18,30,127,127,-22,-13,63,-42,19,5,8,34,-30,-89,-16,-27,26,-72,-5,-37,-87,56,-127,93,9,-17,95,127,-36,60,-120,-12,96,-32,22,-22,50,-8,-15,-19,28, -36,-109,-10,68,-94,64,-90,-8,25,30,58,10,-38,-9,-127,-53,-71,-25,91,72,54,27,-104,30,-83,-29,-13,-127,31,-8,-52,-59,24,38,-24,-127,-10,50,56,85,127,-53,-29,127,19,-127,-27,-2, -115,11,114,-45,-41,81,-47,-36,25,48,82,-52,-47,39,-10,45,-2,-58,-30,59,-101,-41,63,-12,-40,10,22,-69,-9,-117,68,-21,42,21,-116,-23,84,-72,76,86,-29,18,-65,69,17,14,9,73, 
  /* [0][1][][] */ 60,37,-2,127,-45,-30,54,-30,-52,75,14,4,-10,-72,-75,68,-112,-18,17,78,-42,42,-127,-41,-14,-122,-25,-44,127,16,46,127,-127,92,122,2,22,71,-71,-127,65,18,9,28,-113,14,-33,-97, 87,12,-127,-119,105,127,5,127,-127,-88,-95,49,-41,-76,-29,-127,-114,-127,-88,118,122,127,-31,82,-34,53,-87,81,-64,24,-127,-41,12,127,-79,29,-127,23,127,-60,-41,127,-127,-116,127,26,-127,-84, 89,34,123,-5,-4,-71,14,-51,-33,17,-20,-65,-26,-127,-70,74,-127,-116,23,127,-83,33,17,-127,-44,-127,127,10,-29,61,-34,63,98,-27,-35,-9,43,27,41,-67,54,23,-7,10,17,15,12,127, 
  /* [0][2][][] */ -102,-127,30,-24,-74,37,99,36,60,53,71,77,-68,35,-11,-9,56,74,-66,-38,-96,-27,24,-49,-111,-43,-5,48,17,11,94,-1,-36,61,126,32,4,44,1,-54,-26,4,51,12,23,-11,25,-66, -85,-63,59,-126,-127,59,127,67,50,45,16,58,23,-85,-41,13,-7,12,-127,61,-47,29,-112,-31,-25,-122,10,76,28,103,-2,-73,-35,-64,-27,27,-27,127,61,-43,-9,-3,85,-38,60,-23,-18,-17, -40,-20,52,-123,-102,95,102,47,40,-11,55,127,-127,14,-3,67,47,-5,-87,23,-127,-45,69,-87,-127,-6,61,57,10,38,48,-90,-39,12,-53,37,37,62,51,-38,-9,48,68,20,29,-4,37,-62, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.011183870956301689, 0.0087788579985499382, 0.0019669863395392895, 0.002143744146451354, 0.0031945791561156511, 0.0057032979093492031, 0.0081275133416056633, 0.0058877714909613132, 0.046035502105951309, 0.008596787229180336, 0.0090114874765276909, 0.0037388454657047987, 0.0045733647421002388, 0.0056941583752632141, 0.012809533625841141, 0.0053444299846887589, 0.0066707795485854149, 0.0041990443132817745, 0.010543741285800934, 0.0061151548288762569, 0.0053260405547916889, 0.0064106197096407413, 0.0063895713537931442, 0.0066871899180114269, 0.0054905107244849205, 0.0048639671877026558, 0.01186053454875946, 0.0085442382842302322, 0.0098064178600907326, 0.0098630199208855629, 0.0053936797194182873, 0.012782678939402103, 0.0089721065014600754, 0.0088804913684725761, 0.0068133855238556862, 0.0094074979424476624, 0.009412076324224472, 0.0073490152135491371, 0.0031826731283217669, 0.010671875439584255, 0.0063522490672767162, 0.0069578103721141815, 0.0070924446918070316, 0.010250581428408623, 0.0088008539751172066, 0.012056087143719196, 0.0040297224186360836, 0.0080528939142823219, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data18[48] = { 32104, 956, 1489, 1022, 1523, 466, 612, 193, 20198, 14708, -468, 257, 2639, 1781, 3867, 3057, 2808, 4537, -1925, -807, 2892, 2593, 5103, 3529, 2076, 3084, 2145, -299, 34417, 220, 7442, 9131, 5568, 1880, 612, 2409, 2862, 1608, 1512, 333, -482, 3261, 1917, 5517, 4144, 1896, -779, 6542, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 3.7084846553625539e-05, 0.00017449438746552914, 0.00025517944595776498, 0.0003108107193838805, 0.00032277993159368634, 0.00023609328491147608, 0.00037066708318889141, 0.00028603707323782146, 5.1862331019947305e-05, 6.315091741271317e-05, 0.00035449198912829161, 0.00019440239702817053, 0.00022064194490667433, 0.00021349925373215228, 8.3870036178268492e-05, 0.00017475114145781845, 0.00014834970352239907, 0.00018128295778296888, 0.00018954635015688837, 0.00013220890832599252, 0.00020867907733190805, 0.00010333227692171931, 0.00015280875959433615, 8.3601196820382029e-05, 0.00025565488613210618, 0.00027322684763930738, 0.00027614374994300306, 0.00038563489215448499, 3.3670905395410955e-05, 0.0001276863767998293, 0.00010963754175463691, 8.7505002738907933e-05, 0.00016691992641426623, 0.00012048598728142679, 0.00032653441303409636, 0.00026942530530504882, 0.00026209384668618441, 0.00019250418699812144, 0.00031963331275619566, 0.00018676379113458097, 0.00022521786740981042, 0.00019696599338203669, 0.0004248479672241956, 0.00012430311471689492, 0.00018079018627759069, 0.00012533398694358766, 0.00017248728545382619, 0.00013617481454275548, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ 65,-62,88,-12,14,-127,34,-27, 
  /* [1][0][][] */ -23,-80,-80,-18,-127,53,-25,-24, 
  /* [2][0][][] */ 69,-46,47,-24,127,17,15,54, 
  /* [3][0][][] */ 11,65,-16,127,34,30,-36,-57, 
  /* [4][0][][] */ -28,127,89,14,5,49,-58,1, 
  /* [5][0][][] */ -56,56,26,31,127,-33,101,18, 
  /* [6][0][][] */ -3,-38,4,24,72,127,6,-1, 
  /* [7][0][][] */ -13,-28,39,43,68,17,-95,127, 
  /* [8][0][][] */ -74,-106,-15,-62,16,36,-127,-37, 
  /* [9][0][][] */ -127,31,-88,7,99,-21,-99,-15, 
  /* [10][0][][] */ 24,-110,0,-24,-14,-100,-127,-38, 
  /* [11][0][][] */ 36,127,5,32,-27,-56,12,113, 
  /* [12][0][][] */ -15,-27,-77,1,-34,127,32,28, 
  /* [13][0][][] */ -47,-84,-86,1,-33,127,10,103, 
  /* [14][0][][] */ -50,89,-127,71,84,63,-84,72, 
  /* [15][0][][] */ -17,-12,11,38,82,98,-109,-127, 
  /* [16][0][][] */ 15,-127,-110,-67,-68,83,-5,-7, 
  /* [17][0][][] */ 23,103,-69,-38,-60,46,92,-127, 
  /* [18][0][][] */ -95,-127,-13,-73,75,-19,-51,80, 
  /* [19][0][][] */ -22,81,-39,60,43,-127,-100,37, 
  /* [20][0][][] */ 127,-34,21,-46,-19,-18,6,74, 
  /* [21][0][][] */ 74,-77,92,106,-43,127,79,-59, 
  /* [22][0][][] */ -63,47,-11,-9,127,-59,-24,-80, 
  /* [23][0][][] */ 98,-48,112,127,6,-80,67,-1, 
  /* [24][0][][] */ -51,58,127,-31,-21,-19,29,-1, 
  /* [25][0][][] */ -50,-102,63,42,27,37,-38,127, 
  /* [26][0][][] */ 88,-41,-127,-13,-84,20,53,112, 
  /* [27][0][][] */ 17,127,-108,-107,-8,21,22,-88, 
  /* [28][0][][] */ -11,21,-60,-76,42,-52,-127,-98, 
  /* [29][0][][] */ -127,65,-121,-15,53,60,-96,-9, 
  /* [30][0][][] */ 86,-24,18,10,-105,127,71,60, 
  /* [31][0][][] */ -65,59,-49,127,119,-55,-15,3, 
  /* [32][0][][] */ 11,53,21,-31,127,-69,-12,-85, 
  /* [33][0][][] */ -127,59,-109,18,50,39,-13,-9, 
  /* [34][0][][] */ 38,-16,0,-127,-48,-51,-26,88, 
  /* [35][0][][] */ -127,13,39,1,-41,-43,8,18, 
  /* [36][0][][] */ 9,-40,-29,25,-31,0,127,17, 
  /* [37][0][][] */ -47,3,-44,-55,-23,-45,-127,20, 
  /* [38][0][][] */ -86,85,-1,45,-127,13,17,23, 
  /* [39][0][][] */ -80,4,71,-32,-92,127,-113,-50, 
  /* [40][0][][] */ 21,-86,6,30,-59,-50,127,72, 
  /* [41][0][][] */ 18,127,93,55,29,13,-109,-37, 
  /* [42][0][][] */ 51,127,-50,-24,-25,21,-5,-57, 
  /* [43][0][][] */ -45,17,-35,-84,-3,3,-127,84, 
  /* [44][0][][] */ -15,-13,8,24,23,127,29,-8, 
  /* [45][0][][] */ 22,76,-127,-107,-24,-127,29,116, 
  /* [46][0][][] */ 28,95,-69,-17,-127,98,31,-123, 
  /* [47][0][][] */ 37,41,-11,-26,-13,-127,-12,25, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.00060847651911899447, 0.002863049041479826, 0.0041869040578603745, 0.0050996849313378334, 0.0052960719913244247, 0.0038737445138394833, 0.0060817892663180828, 0.004693206399679184, 0.00085094087990000844, 0.0010361603926867247, 0.0058163935318589211, 0.0031896934378892183, 0.0036202238406985998, 0.0035030287690460682, 0.0013761132722720504, 0.0028672618791460991, 0.0024340753443539143, 0.0029744338244199753, 0.0031100169289857149, 0.0021692423615604639, 0.0034239408560097218, 0.0016954435268417001, 0.002507238183170557, 0.001371702179312706, 0.004194705281406641, 0.0044830203987658024, 0.0045308801345527172, 0.0063273762352764606, 0.00055246165720745921, 0.0020950380712747574, 0.0017988983308896422, 0.0014357545878738165, 0.0027387698646634817, 0.0019768963102251291, 0.0053576743230223656, 0.0044206460006535053, 0.0043003535829484463, 0.0031585483811795712, 0.0052444431930780411, 0.0030643616337329149, 0.0036953040398657322, 0.0032317561563104391, 0.0069707720540463924, 0.0020395265892148018, 0.002966348547488451, 0.0020564408041536808, 0.002830117242410779, 0.0022343136370182037, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data20[8] = { 3981, -3663, -7299, -923, 1049, -10623, -12195, -13321, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 0.00017736681911628693, 8.352549048140645e-05, 0.00017451982421334833, 0.00012813493958674371, 0.00017342210048809648, 6.9308625825215131e-05, 7.9450284829363227e-05, 0.00011052591435145587, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -17,27,9,22,-15,2,10,38,-43,-9,-35,5,-14,15,50,-8,-66,-17,19,-25,-18,127,-25,-20,-34,-43,9,18,-42,26,23,-20,4,25,32,57,38,18,31,-17,18,-29,-26,-14,1,34,32,23, 
  /* [1][0][][] */ 26,79,-20,39,67,54,39,112,-59,-56,70,-44,-46,-20,52,-34,3,-39,51,17,20,-127,7,-61,11,14,-24,13,-29,5,-48,-62,-58,32,27,-29,28,45,57,-49,5,30,26,-46,-46,33,14,69, 
  /* [2][0][][] */ -14,24,14,21,29,15,-14,37,28,17,68,15,-2,-21,24,-27,13,30,-2,-4,2,127,-5,2,-1,-50,-9,22,-8,18,-1,-39,-16,4,24,-33,31,2,-42,-8,3,-20,19,-32,-14,53,30,34, 
  /* [3][0][][] */ -30,63,-2,0,2,54,56,-7,-8,-3,15,7,-31,20,45,39,-17,-7,40,-4,44,-76,15,26,-15,-5,-127,52,-42,-20,-1,7,-45,-5,35,18,27,-22,-42,-31,-1,-26,25,35,29,2,52,21, 
  /* [4][0][][] */ 15,6,-54,-6,24,0,10,-3,-19,-1,2,18,-5,-7,-16,8,-29,40,5,-13,-2,-127,-1,-10,35,40,9,-56,34,5,1,7,-43,23,33,-35,-33,19,-16,3,14,-59,-89,33,34,21,8,-20, 
  /* [5][0][][] */ 7,62,58,-22,18,61,18,-127,54,-20,-19,-8,79,-48,21,47,3,-38,44,26,-41,122,-19,38,72,-19,96,45,112,28,-27,-66,-57,-27,94,19,-35,-66,-9,-108,-30,-25,81,63,-90,-67,-21,-10, 
  /* [6][0][][] */ 55,7,-20,6,56,-14,46,-31,57,30,23,-25,-13,31,26,-46,27,-77,-3,-10,36,2,5,46,-58,-51,42,13,49,-48,127,50,44,41,47,-43,-34,25,40,-12,-23,14,-31,60,63,35,44,-25, 
  /* [7][0][][] */ -32,16,59,57,-21,6,43,95,40,26,-4,66,-31,0,20,-20,62,25,-1,-15,-11,-90,-2,-81,-76,72,33,25,-18,38,8,-23,14,-8,17,52,3,127,-89,12,28,2,29,-43,-43,15,25,40, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0075380895286798477, 0.0035498333163559437, 0.0074170925654470921, 0.0054457350634038448, 0.0073704393580555916, 0.0029456166084855795, 0.0033766371197998524, 0.0046973512507975101, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data22[48] = { 19367, 34876, 7612, 6022, 3714, 13080, 8812, 4155, 43273, 905, 2044, 27475, 9035, 753, 8772, 4489, 7481, 48398, 13373, -4583, 18841, -11511, -5451, -1549, 42462, 41706, -2217, -568, 79, 11610, -183, 4689, -11667, 14219, 13870, 22357, 13371, 23320, -188, 2968, 3068, 80957, -852, -843, -569, 980, 25817, 9120, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 6.442995072575286e-05, 6.6109481849707663e-05, 0.00011245180940022692, 6.146236410131678e-05, 0.00021136699069757015, 0.00013571306772064418, 8.424156840192154e-05, 0.00052719120867550373, 4.1186871385434642e-05, 6.6876862547360361e-05, 6.6156790126115084e-05, 3.7863133911741897e-05, 0.0001123279653256759, 3.8910115108592436e-05, 0.00012515629350673407, 6.5754065872170031e-05, 5.7391116570215672e-05, 3.1993768061511219e-05, 4.7758167056599632e-05, 0.00012339517707005143, 2.3220420189318247e-05, 0.00024320211377926171, 0.00011461998656159267, 9.747708827489987e-05, 3.8599726394750178e-05, 6.2490027630701661e-05, 7.1467278758063912e-05, 0.0001758083380991593, 5.1306884415680543e-05, 5.6136097555281594e-05, 0.00013588239380624145, 0.00013817712897434831, 6.5895983425434679e-05, 4.1992734622908756e-05, 0.00017638130520936102, 0.00012710133159998804, 9.9832031992264092e-05, 0.00014936225488781929, 0.00014460500096902251, 4.9971051339525729e-05, 7.3205810622312129e-05, 1.6563049939577468e-05, 6.7458437115419656e-05, 4.8737430915934965e-05, 0.00048993941163644195, 0.0001075073960237205, 7.9282246588263661e-05, 0.00015367187734227628, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -36,-127,-76,33,-76,-4,-17,9,-58,69,51,-40,-30,-6,-36,-16,89,-118,-58,127,127,86,-14,120,-86,-127,106,84,104,-50,51,34,56,-123,-55,-73,-64,5,122,43,-7,-121,61,65,43,91,-109,-63, -127,-112,-38,45,-52,-30,-99,12,-22,54,61,-9,-50,58,-31,68,121,-114,-98,40,72,76,110,117,-48,-94,127,60,96,-49,37,47,103,-127,-127,-127,-40,-35,60,91,73,-110,75,97,-42,56,-127,-34, -71,-98,5,31,-6,-11,-18,9,-64,38,9,-42,30,29,-34,-15,127,-127,-93,2,77,-127,-6,-21,-12,-117,59,-18,47,-61,127,75,127,-75,-82,-57,-12,51,-6,58,-9,-111,53,59,81,81,-35,-14, 
  /* [0][1][][] */ -3,-116,-54,3,-127,-58,-92,12,-127,125,74,-127,-28,11,-113,69,115,-53,-108,80,104,109,0,127,-127,-106,79,127,110,-92,59,21,56,-101,4,-58,-127,-78,127,36,-127,-92,25,85,97,111,-101,-30, -105,-48,-50,-28,-80,-38,-97,-8,-106,127,127,-93,-127,127,-58,127,64,-111,-127,-12,38,53,127,100,-95,-44,104,47,86,-58,17,127,40,-75,-22,-63,-68,-127,98,127,-65,-127,127,69,1,10,-125,-27, 7,-28,-127,-127,3,-48,-27,8,-14,74,60,-12,-34,68,-62,36,77,-102,-63,-47,17,-123,-56,16,-56,-126,22,2,20,-127,104,71,69,67,24,-77,-24,-68,6,75,-122,-48,49,71,127,38,-34,-31, 
  /* [0][2][][] */ 34,-113,-12,52,-42,-127,-65,-127,-94,66,79,-32,-4,-25,-127,58,16,-96,28,41,108,72,-21,94,-48,-37,30,62,127,-25,23,69,48,-127,-26,4,-117,-115,86,35,-88,-8,57,65,45,127,-91,-127, -35,-124,-56,-5,-121,-41,-127,-62,-56,79,59,-38,5,83,-74,20,12,-54,-41,-3,3,-11,49,-5,-6,53,21,5,41,-67,-21,88,32,-107,-35,-57,-64,-98,42,65,-93,-74,118,127,2,3,-30,-80, -110,-92,-97,-63,-21,-126,-40,-53,-77,86,-2,-7,34,35,-38,14,41,-98,0,-49,-9,-74,18,-20,-20,-49,31,44,50,-31,75,63,58,-9,-8,-11,7,-69,46,16,-16,13,85,30,70,95,-19,-44, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0027382727712392807, 0.0028096530586481094, 0.0047792019322514534, 0.0026121502742171288, 0.0089830970391631126, 0.0057678050361573696, 0.003580266609787941, 0.022405626252293587, 0.0017504419665783644, 0.0028422665782272816, 0.0028116635512560606, 0.0016091831494122744, 0.004773938562721014, 0.0016536798793822527, 0.0053191422484815121, 0.0027945477049797773, 0.0024391224142163992, 0.0013597351498901844, 0.0020297220908105373, 0.0052442951127886772, 0.00098686781711876392, 0.010336089879274368, 0.0048713493160903454, 0.0041427761316299438, 0.0016404882771894336, 0.0026558262761682272, 0.003037359332665801, 0.0074718543328344822, 0.0021805425640195608, 0.0023857841733843088, 0.0057750013656914234, 0.0058725276030600071, 0.0028005791828036308, 0.0017846911214292049, 0.0074962056241929531, 0.0054018064402043819, 0.0042428611777722836, 0.0063478955999016762, 0.0061457124538719654, 0.0021237696055322886, 0.0031112467404454947, 0.00070392957422882318, 0.0028669836465269327, 0.0020713408011943102, 0.020822424441576004, 0.0045690643601119518, 0.0033694955054670572, 0.0065310546196997166, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data24[48] = { 4374, 1840, 868, -490, -1191, 1115, 3844, 5924, 3562, -2848, 2057, -584, 2648, 237, 888, -2238, -1431, 2218, 327, 2360, -372, 24265, 2668, -948, 592, 3962, 2665, -3271, 163, 401, -2574, -2010, 1200, 1162, 6679, 8550, 2686, 5867, -2461, -1067, -474, 1025, 397, 291, -3161, -2458, 4446, 560, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00013471760030370206, 0.00030154423438943923, 0.00033347588032484055, 0.00035537211806513369, 0.00029489691951312125, 0.00021704543905798346, 0.0001858752075349912, 0.00013226481678429991, 0.00019008206436410546, 0.00016701790445949882, 0.0002312528231414035, 0.00025769017520360649, 0.00019083707593381405, 0.00031191136804409325, 0.00039533659582957625, 0.00016297594993375242, 0.00034739935654215515, 0.00026765922666527331, 0.00041321013122797012, 0.00019739673007279634, 0.00032885692780837417, 6.5196196374017745e-05, 0.00019423184858169407, 0.00024276740441564471, 0.0002286601229570806, 0.00019432103727012873, 0.00024372059851884842, 0.00017800788918975741, 0.00048196176066994667, 0.00033488127519376576, 0.00019544063252396882, 0.00022783903114032, 0.00038563032285310328, 0.00029198959236964583, 0.0001409707183483988, 0.00011434372572693974, 0.00028798016137443483, 0.00015975176938809454, 0.00022339355200529099, 0.00021770293824374676, 0.00034450445673428476, 0.00027258871705271304, 0.00044702005106955767, 0.00035172095522284508, 0.00017913845658767968, 0.00020974258950445801, 0.00014890018792357296, 0.00025597945204935968, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 8,70,-91,127,58,119,29,5, 
  /* [1][0][][] */ 54,-127,-81,-25,-4,47,47,5, 
  /* [2][0][][] */ -67,33,-12,-95,-15,-127,23,-79, 
  /* [3][0][][] */ -45,127,82,4,-1,-125,-19,34, 
  /* [4][0][][] */ -127,-5,-104,63,9,-15,-53,-50, 
  /* [5][0][][] */ 127,-36,-64,8,45,-40,79,2, 
  /* [6][0][][] */ 45,-66,-70,20,-93,-34,-51,127, 
  /* [7][0][][] */ -24,-104,-42,-42,69,-44,-29,127, 
  /* [8][0][][] */ 66,35,-71,-127,95,-105,-114,-121, 
  /* [9][0][][] */ -113,74,-3,67,-41,127,113,-52, 
  /* [10][0][][] */ -29,-8,118,-127,-57,74,45,36, 
  /* [11][0][][] */ 93,-21,117,8,-49,40,74,127, 
  /* [12][0][][] */ 56,41,55,-45,65,127,109,-114, 
  /* [13][0][][] */ 48,63,-19,75,-1,-127,-29,58, 
  /* [14][0][][] */ -6,-127,-42,-18,12,41,11,-23, 
  /* [15][0][][] */ -127,-34,-36,-68,116,126,-102,46, 
  /* [16][0][][] */ -4,-38,120,-18,-35,34,127,97, 
  /* [17][0][][] */ 58,6,65,-11,-81,-107,-57,-127, 
  /* [18][0][][] */ -127,-3,-85,9,5,-45,35,-46, 
  /* [19][0][][] */ 48,-61,90,-16,-82,-22,127,85, 
  /* [20][0][][] */ -1,127,31,-3,1,58,46,6, 
  /* [21][0][][] */ -50,52,97,-109,13,127,3,-5, 
  /* [22][0][][] */ 77,-9,63,7,-63,-10,127,67, 
  /* [23][0][][] */ -87,120,34,43,-75,37,-102,127, 
  /* [24][0][][] */ -60,-41,58,2,-127,95,2,-110, 
  /* [25][0][][] */ -42,20,49,18,-127,49,-59,-1, 
  /* [26][0][][] */ -44,-127,18,-33,9,26,-2,-1, 
  /* [27][0][][] */ -20,76,44,52,-46,127,-60,-25, 
  /* [28][0][][] */ -16,-73,52,18,42,127,21,64, 
  /* [29][0][][] */ 31,127,-12,20,-91,-47,-15,39, 
  /* [30][0][][] */ -41,92,90,72,-127,-64,-42,-66, 
  /* [31][0][][] */ 18,44,9,52,-52,-28,45,-127, 
  /* [32][0][][] */ -18,-27,-80,66,-127,-49,-21,-23, 
  /* [33][0][][] */ 74,-22,15,72,-2,70,6,127, 
  /* [34][0][][] */ 127,28,-93,-36,-35,13,84,50, 
  /* [35][0][][] */ 127,108,117,-114,-36,-69,37,111, 
  /* [36][0][][] */ -34,-127,90,48,49,62,-4,-29, 
  /* [37][0][][] */ 33,21,-9,-9,15,-55,-8,127, 
  /* [38][0][][] */ 127,-2,47,19,14,-6,-42,41, 
  /* [39][0][][] */ 46,55,-127,-106,-102,83,68,-114, 
  /* [40][0][][] */ -35,127,-21,32,-26,-13,-37,-29, 
  /* [41][0][][] */ -127,35,14,-81,86,36,24,-51, 
  /* [42][0][][] */ 34,-29,-18,-18,-19,127,-16,71, 
  /* [43][0][][] */ -107,44,127,6,90,22,-38,40, 
  /* [44][0][][] */ -4,127,-21,47,-50,-69,-17,2, 
  /* [45][0][][] */ -16,88,72,-75,-127,-20,-76,-40, 
  /* [46][0][][] */ 43,-127,-89,13,15,10,-126,77, 
  /* [47][0][][] */ -24,-127,-8,44,6,-40,76,118, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00127568026073277, 0.0028554103337228298, 0.0031577805057168007, 0.0033651224803179502, 0.0027924650348722935, 0.0020552666392177343, 0.0017601066501811147, 0.0012524542398750782, 0.0017999425763264298, 0.0015815413789823651, 0.0021898006089031696, 0.0024401436094194651, 0.0018070919904857874, 0.0029535798821598291, 0.0037435577251017094, 0.0015432668151333928, 0.0032896259799599648, 0.0025345433969050646, 0.0039128074422478676, 0.0018692073645070195, 0.0031140423379838467, 0.00061736186034977436, 0.0018392381025478244, 0.0022988354321569204, 0.0021652495488524437, 0.0018400826957076788, 0.00230786157771945, 0.0016856087604537606, 0.0045638368465006351, 0.0031710886396467686, 0.0018506844062358141, 0.0021574744023382664, 0.0036516461987048388, 0.0027649346739053726, 0.0013348929351195693, 0.0010827541118487716, 0.002726968377828598, 0.0015127361984923482, 0.0021153788547962904, 0.0020614927634596825, 0.0032622134312987328, 0.002581222215667367, 0.0042329635471105576, 0.0033305485267192125, 0.0016963144298642874, 0.0019861138425767422, 0.0014099794207140803, 0.0024239441845566034, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data26[8] = { 6958, -11983, -4863, 1312, 9796, -4824, 3518, 5552, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00021361377730499953, 0.00015442278527189046, 0.00011389758583391085, 8.7214139057323337e-05, 0.00021121000463608652, 0.00010532348096603528, 0.00014609421486966312, 0.00010895850573433563, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -45,29,-19,-43,-38,23,-4,22,52,0,8,26,17,17,-29,4,-37,0,-17,-35,-30,14,-23,5,17,-5,91,-13,-10,-60,-13,14,-16,18,127,-23,-15,-28,32,-44,24,-22,-8,-11,-12,18,-14,-82, 
  /* [1][0][][] */ 12,-15,-17,77,7,-21,21,43,62,93,33,-71,-47,47,-7,9,-1,-16,23,-44,-53,37,-43,37,87,27,-16,9,33,5,127,10,-17,-47,-29,-14,-12,-8,-6,-19,2,-17,25,23,-20,10,47,32, 
  /* [2][0][][] */ -33,9,-35,106,-68,-10,13,-39,-46,30,26,-101,-11,1,-38,-26,127,32,12,-51,-9,-15,-13,24,67,-5,88,-40,42,6,-46,-17,3,-42,23,-1,-13,14,15,-84,47,-42,-40,-79,-64,-79,-43,110, 
  /* [3][0][][] */ 45,-74,24,-33,53,-55,10,-100,52,-51,-1,-12,-108,-59,5,21,26,-13,53,-32,4,41,-93,-6,88,-22,44,29,1,-31,-9,-23,-38,53,24,-22,-53,38,19,7,127,19,-39,29,-21,42,25,-55, 
  /* [4][0][][] */ -22,5,14,-2,-11,37,-14,-18,47,-5,4,-42,-3,14,-80,11,-14,4,52,-3,-39,19,7,31,42,-32,-32,37,62,-15,-21,39,-10,-13,13,13,-126,-2,35,1,18,-27,-25,25,-23,50,-63,-127, 
  /* [5][0][][] */ -47,-106,69,111,-40,26,-50,114,-84,64,47,35,-80,25,74,-78,-34,20,42,-32,4,35,48,13,-73,28,-33,68,-80,-94,46,14,-93,-62,-31,18,127,12,-30,33,-50,-40,63,115,6,46,35,53, 
  /* [6][0][][] */ 40,-10,-34,-29,80,-8,-19,-1,37,6,17,-37,-7,-21,-26,0,5,1,-34,-29,-51,17,26,38,41,-54,72,6,-32,127,-1,12,37,27,-112,-25,-84,-53,27,-47,-13,-21,-45,-91,-22,22,-49,14, 
  /* [7][0][][] */ -74,-70,48,-55,-11,127,33,-31,-7,-77,-28,5,7,-34,-37,-38,15,-53,89,5,23,-21,11,-4,-10,30,84,24,11,22,19,2,-16,-13,-49,96,-82,63,-27,-23,-46,6,-19,-27,-18,-2,26,-31, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0090785855427384377, 0.0065629682503640652, 0.0048406473360955715, 0.0037066007498651743, 0.0089764250442385674, 0.0044762478210031986, 0.0062090042047202587, 0.0046307365410029888, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data28[48] = { 15833, 11134, -8212, 5787, 4849, -941, 4300, 2618, 14745, 7993, -491, 2240, -1391, 4691, 3783, -1775, -3408, -193, -5138, -864, 10274, 3588, -13005, -358, -7594, -4258, 1042, 6917, -2598, 320, 3961, -387, 20854, -840, -1254, 4887, -4420, 1196, -544, 4457, 21756, -3701, 3914, 5913, 4171, 2215, -2957, 5835, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00014173680392559618, 0.00023705410421825945, 0.0001501375954831019, 0.00044385396176949143, 0.00014821009244769812, 0.00051126227481290698, 0.00013482752547133714, 0.00021805842698086053, 3.3419422834413126e-05, 0.00013969412248115987, 0.00021061750885564834, 0.00045144726755097508, 0.00025780074065551162, 6.8449691752903163e-05, 0.0003610527201090008, 0.00033373519545421004, 7.8775847214274108e-05, 0.0039803870022296906, 0.00041250814683735371, 0.00021171300613787025, 0.00016135492478497326, 0.00035251755616627634, 0.00013868931273464113, 0.00014464094419963658, 0.00021505089534912258, 0.00023402718943543732, 0.0001966673880815506, 0.00015459021960850805, 0.00016362602764274925, 0.0002310748677700758, 0.00016354724357370287, 0.00030492988298647106, 2.391686211922206e-05, 0.0003750183095689863, 0.00012914276157971472, 0.00021918631682638079, 0.00016058096662163734, 0.00021903046581428498, 0.00038576938095502555, 0.00022047723177820444, 5.3163483244134113e-05, 0.00017615230171941221, 0.00014043625560589135, 9.4530252681579441e-05, 0.00017027351714204997, 0.00026770454132929444, 0.00024688636767677963, 0.00062726886244490743, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -96,41,-35,-51,-9,-19,6,-29,-22,-49,-7,32,-19,-123,-127,47,73,-13,93,16,-116,-68,127,-81,-3,-43,9,48,3,21,-45,127,12,-9,10,32,-18,-4,-4,3,62,-70,-24,29,45,-127,-9,-7, -40,-127,68,-111,-29,-33,-46,120,121,-83,4,42,6,-127,-73,3,-54,-6,0,-116,-53,2,54,111,37,50,33,82,47,5,-47,-82,-99,39,5,-9,92,-88,40,-27,3,-127,-32,-5,74,82,59,-18, -87,-24,11,-8,-25,28,18,54,-3,26,-1,11,23,45,6,53,48,-4,-2,8,-127,43,-3,-57,8,120,31,-26,2,25,-21,-31,14,-4,4,-38,-45,127,-20,-10,78,-23,17,-59,58,46,17,-27, 
  /* [0][1][][] */ 0,-34,-97,2,-40,45,-29,-8,-3,-88,-7,-117,-31,25,-109,127,127,-5,127,102,-66,103,115,127,19,-50,-41,-31,52,-53,-7,-102,25,-32,-30,28,-16,-64,35,16,25,119,-30,-6,-94,109,36,-28, -127,67,127,127,127,-127,-127,-14,-4,-127,-127,-127,127,38,14,88,5,-127,-64,-127,71,-17,-53,-99,127,-8,127,-83,127,127,-53,65,-127,-127,127,-109,127,-69,-127,-127,6,69,-95,12,-127,-87,127,127, -29,-12,23,42,29,103,-1,59,83,23,47,-78,-8,22,-31,13,87,26,-10,79,-68,-127,42,-43,-4,127,21,-8,33,25,127,5,45,-30,53,-71,36,102,23,-10,8,102,92,-29,-35,-70,37,-16, 
  /* [0][2][][] */ -77,-15,-40,-46,-9,0,-2,-42,-8,-20,1,43,4,50,45,-41,59,-6,57,13,-14,-25,91,29,6,-56,-17,-127,33,-32,-27,-35,21,58,-2,-27,-58,-69,-11,4,-29,38,-84,-45,-62,-1,-13,-35, -19,-109,105,-30,-120,-24,-63,-121,127,31,31,59,-12,38,41,-14,29,77,-35,-31,-21,-25,60,-21,16,-43,-75,-127,81,-55,50,19,-40,72,-66,-64,75,-121,20,34,-127,-6,-127,127,9,-11,43,-37, -71,-72,75,-14,-67,42,21,-127,4,-4,-22,13,-8,66,63,-119,71,-30,-38,5,-2,-19,-6,-61,-3,15,-26,-67,13,-42,56,2,10,36,-53,-127,-93,44,-36,23,-23,30,1,31,-81,-29,-12,-25, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.006023813970386982, 0.010074798949062824, 0.006380847655236721, 0.018863793462514877, 0.0062989289872348309, 0.021728646010160446, 0.0057301698252558708, 0.0092674829065799713, 0.0014203254831954837, 0.0059369998052716255, 0.008951243944466114, 0.019186507910490036, 0.010956531390547752, 0.0029091117903590202, 0.015344739891588688, 0.014183745719492435, 0.0033479733392596245, 0.1691664457321167, 0.017531596124172211, 0.008997802622616291, 0.0068575842306017876, 0.014981996268033981, 0.005894295871257782, 0.0061472398228943348, 0.0091396626085042953, 0.0099461553618311882, 0.0083583639934659004, 0.0065700840204954147, 0.0069541060365736485, 0.0098206819966435432, 0.0069507574662566185, 0.012959519401192665, 0.0010164666455239058, 0.015938278287649155, 0.005488567054271698, 0.00931541807949543, 0.0068246908485889435, 0.0093087945133447647, 0.016395198181271553, 0.0093702822923660278, 0.0022594479378312826, 0.0074864728376269341, 0.0059685404412448406, 0.0040175355970859528, 0.0072366246022284031, 0.011377442628145218, 0.010492670349776745, 0.026658926159143448, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data30[48] = { 4724, 3170, 2333, 9544, 418, 2039, 2228, 10320, 1345, 3745, 2888, 3512, 2745, 1747, 3321, 449, 359, -4053, 3575, 3346, 2457, 8337, 4904, 2505, 1995, 2002, 1293, 88, -1666, 2495, 4425, 914, 1120, 91, 655, -755, 2628, 1644, 358, 1867, 736, 5397, 1150, 939, 1272, 4507, -1222, 24235, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00018261290097143501, 0.00025521888164803386, 0.000285260786768049, 0.00011541878484422341, 0.0011120144044980407, 0.00027894446975551546, 0.00033185951178893447, 9.2892369139008224e-05, 0.00026830309070646763, 0.00022163531684782356, 0.00022320597781799734, 0.00021225513773970306, 0.00025769483181647956, 0.00026350200641900301, 0.00024300762743223459, 0.00030375586356967688, 0.00053888547699898481, 0.00022583579993806779, 0.00025502344942651689, 0.00036595662822946906, 0.00034938612952828407, 0.00010956199548672885, 0.00018463579181116074, 0.00019682501442730427, 0.00028408461366780102, 0.0003831953217741102, 0.0004498874768614769, 0.00046939466847106814, 0.0002630697563290596, 0.00048826224519871175, 0.00018743835971690714, 0.00050174386706203222, 0.00037218001671135426, 0.00046769456821493804, 0.00090105057461187243, 0.00029744973289780319, 0.00016443640924990177, 0.00025325224851258099, 0.00039089567144401371, 0.00035997648956254125, 0.00037948813405819237, 0.00016653879720252007, 0.00031279295217245817, 0.00029768870444968343, 0.0003795249795075506, 0.00018390199693385512, 0.00031778929405845702, 5.0930932047776878e-05, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -98,-30,18,-115,-127,118,11,-83, 
  /* [1][0][][] */ 90,21,11,-29,-9,64,-127,23, 
  /* [2][0][][] */ -75,26,-121,84,-95,127,13,23, 
  /* [3][0][][] */ 127,-52,-36,56,18,-50,39,105, 
  /* [4][0][][] */ -59,-11,5,15,-22,-42,127,-7, 
  /* [5][0][][] */ -8,127,75,-58,-69,-98,83,-70, 
  /* [6][0][][] */ -12,-57,57,127,15,-116,-70,3, 
  /* [7][0][][] */ 127,14,53,25,-90,30,53,118, 
  /* [8][0][][] */ -60,-127,79,23,110,-46,-7,12, 
  /* [9][0][][] */ -91,-127,13,-55,9,11,-85,111, 
  /* [10][0][][] */ -115,-80,57,76,104,127,-16,24, 
  /* [11][0][][] */ -47,-85,-41,-3,-12,28,10,127, 
  /* [12][0][][] */ 76,-8,127,-90,34,-123,111,-12, 
  /* [13][0][][] */ 49,-15,9,127,13,35,47,-70, 
  /* [14][0][][] */ -3,-23,39,-15,127,6,22,53, 
  /* [15][0][][] */ -102,127,86,116,103,34,-37,83, 
  /* [16][0][][] */ 5,-28,-76,-127,-55,46,-8,79, 
  /* [17][0][][] */ 31,127,-4,80,-46,-41,-7,-6, 
  /* [18][0][][] */ -18,10,0,-127,-26,-49,40,-16, 
  /* [19][0][][] */ 22,-23,-127,-64,-91,109,93,-60, 
  /* [20][0][][] */ 26,16,33,-21,127,28,31,-33, 
  /* [21][0][][] */ -127,-99,-54,-82,53,5,0,12, 
  /* [22][0][][] */ -53,-46,54,127,15,-2,-42,87, 
  /* [23][0][][] */ 27,14,-50,77,78,55,15,127, 
  /* [24][0][][] */ 127,-1,-85,-38,-29,-10,64,-22, 
  /* [25][0][][] */ 23,-15,-61,-7,62,-46,-127,-70, 
  /* [26][0][][] */ 127,-16,53,-27,-85,42,43,88, 
  /* [27][0][][] */ 60,-18,-34,127,31,-16,-24,-50, 
  /* [28][0][][] */ -110,127,119,88,98,-23,-58,47, 
  /* [29][0][][] */ 22,11,39,11,-76,-5,127,65, 
  /* [30][0][][] */ -48,-47,60,-75,-53,127,51,69, 
  /* [31][0][][] */ 61,39,74,3,-88,58,103,127, 
  /* [32][0][][] */ -127,-36,-42,13,-7,33,127,42, 
  /* [33][0][][] */ -54,127,-8,23,-17,35,-61,-14, 
  /* [34][0][][] */ 76,13,31,-16,-10,24,-127,33, 
  /* [35][0][][] */ -1,-5,5,51,-39,28,26,-127, 
  /* [36][0][][] */ -21,5,-49,-70,127,-51,-3,111, 
  /* [37][0][][] */ 52,-10,-26,-76,-67,-23,47,-127, 
  /* [38][0][][] */ -34,127,24,81,-36,-86,17,-1, 
  /* [39][0][][] */ 121,28,127,-34,-127,41,111,127, 
  /* [40][0][][] */ -127,-70,119,65,13,-44,-70,54, 
  /* [41][0][][] */ 57,33,7,36,89,-51,24,127, 
  /* [42][0][][] */ 17,-43,-84,-123,-35,69,25,-127, 
  /* [43][0][][] */ 64,3,127,-32,-55,-6,58,118, 
  /* [44][0][][] */ -97,-46,-28,127,8,0,-62,30, 
  /* [45][0][][] */ 127,-10,50,-24,-37,10,21,67, 
  /* [46][0][][] */ 30,-118,-51,91,127,-19,30,-43, 
  /* [47][0][][] */ 126,102,-69,127,-116,-102,34,-104, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0019407247891649604, 0.002712347311899066, 0.0030316186603158712, 0.0012266170233488083, 0.011817971244454384, 0.0029644917231053114, 0.00352684804238379, 0.00098721683025360107, 0.0028514002915471792, 0.0023554367944598198, 0.0023721291217952967, 0.0022557487245649099, 0.002738660667091608, 0.0028003763873130083, 0.0025825717020779848, 0.0032281756866723299, 0.0057270238175988197, 0.0024000776465982199, 0.0027102704625576735, 0.0038892163429409266, 0.0037131127901375294, 0.0011643738253042102, 0.0019622230902314186, 0.002091764472424984, 0.0030191189143806696, 0.0040724212303757668, 0.0047811944968998432, 0.0049885078333318233, 0.0027957828715443611, 0.0051890234462916851, 0.0019920074846595526, 0.0053322999738156796, 0.0039553558453917503, 0.0049704397097229958, 0.0095759453251957893, 0.0031611570157110691, 0.0017475534696131945, 0.0026914468035101891, 0.0041542570106685162, 0.0038256621919572353, 0.0040330230258405209, 0.0017698967130854726, 0.0033242176286876202, 0.0031636967323720455, 0.0040334146469831467, 0.0019544246606528759, 0.0033773165196180344, 0.00054127018665894866, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data32[8] = { 4222, 5241, -1621, 9144, 2644, 804, 4543, -4331, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00012693420285359025, 0.00010730863141361624, 6.3948427850846201e-05, 0.00011723882926162332, 9.2649206635542214e-05, 0.00010162660328205675, 0.00014239428855944425, 0.00027996228891424835, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -43,34,-10,-16,-48,-31,-81,47,-13,16,52,40,34,0,-21,27,-18,49,-8,-98,37,50,-127,11,-14,-2,-44,38,1,-8,6,18,3,-30,42,17,-1,116,-76,-34,-12,11,-33,17,-4,-1,36,7, 
  /* [1][0][][] */ -58,-114,-84,5,50,-14,-116,81,-21,-43,-40,-85,-30,58,-8,-42,127,-115,-24,-33,-57,11,-13,-20,17,-14,-29,-51,36,-25,-114,-14,33,-47,-127,-89,24,19,-90,1,1,34,7,59,-21,-1,-12,36, 
  /* [2][0][][] */ 17,-81,16,88,98,14,91,-8,-37,-38,-18,-15,-2,-33,43,26,-7,-90,52,-60,-2,-49,-24,0,-74,64,78,-107,-29,7,-34,-46,14,0,-84,-39,-24,127,85,-37,-20,-23,-21,-97,62,49,36,-14, 
  /* [3][0][][] */ 14,21,25,-32,39,16,20,-86,18,20,6,-18,20,-87,-43,4,-32,18,-4,11,3,53,-127,12,7,-85,20,55,41,-42,-23,48,19,21,18,-54,-83,-50,13,12,19,20,7,3,-17,3,-7,-50, 
  /* [4][0][][] */ 42,-74,5,77,88,-3,-6,-1,-22,-34,35,-25,74,48,-11,15,-29,-74,65,41,24,-70,127,3,-60,13,-21,-11,-15,-5,-75,-45,91,-25,-58,-51,-66,-47,-14,2,-58,107,-8,11,58,68,42,10, 
  /* [5][0][][] */ -58,-25,-10,52,-16,6,-6,-41,-32,-37,1,13,-4,7,-58,27,127,-20,45,-43,16,-58,0,-4,68,-74,-82,-16,59,23,29,-39,-15,-38,-36,27,-77,-11,-1,-45,-37,16,78,45,27,-2,31,-26, 
  /* [6][0][][] */ -23,7,-37,36,-23,62,-77,-3,-24,8,-127,27,47,40,95,16,9,7,50,-18,34,-6,-30,-26,-7,-12,-70,21,11,-52,20,-32,38,-50,-2,7,4,5,-39,-10,-23,42,-25,5,40,37,29,-1, 
  /* [7][0][][] */ 26,-7,43,-23,9,12,12,-14,25,1,0,15,-14,-5,4,0,21,-3,-30,-22,-22,10,127,12,9,-22,0,5,9,1,-15,6,-1,20,0,-14,-15,18,5,25,2,0,15,-10,-21,-9,-16,24, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0053947032429277897, 0.0045606167986989021, 0.0027178081218153238, 0.0049826502799987793, 0.0039375913329422474, 0.0043191304430365562, 0.0060517573729157448, 0.011898397468030453, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data34[48] = { 12643, -1492, 150, -770, 9945, -780, -2706, 6706, 196, -126, -2171, -707, 3552, -1531, 46, -214, 11542, 640, -3424, 47195, -1063, 12784, -1987, -1987, -2064, -5777, 9369, -532, 1046, -521, 1574, 4992, 3873, 1863, 8540, -287, 2169, -2514, 8596, -3702, -1299, -3763, 4890, -3931, 8921, 441, -485, -6415, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 4.3638388888211921e-05, 0.00034494846477173269, 0.0006851876387372613, 0.00064963381737470627, 0.00010539664071984589, 0.00010623931302689016, 8.8077438704203814e-05, 0.00019976904150098562, 0.00011660056043183431, 0.00038419765769504011, 3.9673490391578525e-05, 0.00029289294616319239, 0.00084578554378822446, 7.0891073846723884e-05, 0.00010622957051964477, 0.0033721935469657183, 0.00018237107724417001, 0.00030309264548122883, 0.00046876262058503926, 6.6036482166964561e-05, 0.0003691681195050478, 0.00011545352026587352, 0.00026959434035234153, 0.00011036975047318265, 0.00014069564349483699, 0.00067853584187105298, 0.00011300394544377923, 0.00030128398793749511, 0.00065963424276560545, 0.00029975015786476433, 7.6134223490953445e-05, 7.1789494541008025e-05, 0.0010082363151013851, 0.00041987831355072558, 0.00018803120474331081, 0.00013631601177621633, 0.00039709062548354268, 8.038058876991272e-05, 8.2265200035180897e-05, 0.0002745903329923749, 0.00015429948689416051, 0.00024333667533937842, 0.00020157922699581832, 0.0001532758615212515, 0.00063573796069249511, 0.00016366578347515315, 0.0020209264475852251, 0.00047367392107844353, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ 28,-40,-81,-66,-12,-104,37,-107,96,4,78,53,-103,68,78,-112,52,-96,22,-103,-127,-8,39,115,29,65,-28,64,-127,4,127,-83,-67,-60,16,73,-127,88,127,79,-65,-88,5,-2,-78,-43,15,-76, 123,-60,80,127,52,40,127,-127,-94,80,48,81,0,76,64,114,63,-106,-56,-127,79,-97,53,10,127,127,-33,94,2,109,68,-71,36,123,127,127,-51,98,105,-21,75,61,2,103,127,109,-7,2, -2,-35,-12,-43,3,75,27,-92,-2,43,-46,45,80,-23,-66,5,33,-49,85,-59,13,11,-85,-72,44,-10,-28,27,54,27,12,-13,-8,-45,37,25,-11,34,66,-43,-62,127,49,60,-63,-89,-5,107, 
  /* [0][1][][] */ 62,76,-127,49,-100,-127,19,-112,127,-83,127,-105,59,127,127,127,-44,116,19,-98,119,-43,52,127,-12,-1,-30,24,-66,111,42,-95,-127,-88,-82,72,-14,92,114,127,-61,-78,-44,49,-22,-33,-113,-127, 127,127,124,11,-127,15,98,-98,-110,-127,98,-127,11,114,81,-115,-19,127,127,-111,-50,-127,77,-18,42,7,-127,86,-10,127,106,-127,98,127,-65,30,9,127,105,-29,118,-3,-4,127,-32,127,127,59, 8,56,-4,43,-28,88,53,-125,-28,-101,-66,-71,-127,-39,-109,0,30,34,-69,-65,-40,-8,-127,-86,-30,-6,-81,29,13,29,44,3,-2,-71,-29,25,15,43,-9,-65,-58,114,4,91,-15,-112,11,122, 
  /* [0][2][][] */ 5,-34,-29,-47,39,-16,2,-63,105,45,67,45,4,27,3,-11,-127,-32,-23,-19,25,-10,17,51,60,-28,1,-89,-9,69,-50,-45,-39,-62,-101,-18,81,-7,16,75,-127,-44,-127,18,-38,18,87,-57, 30,-36,8,-39,43,13,24,-11,-44,89,29,61,-26,34,-13,17,-80,-21,-19,-78,-10,-108,33,3,115,-19,-41,-127,-7,78,16,-54,15,82,-125,-1,127,31,53,-20,-82,6,-11,102,-49,1,-103,76, 15,-3,22,-24,-3,42,42,-80,22,70,10,28,-8,-51,-41,-6,15,-1,11,-19,19,-36,-42,-32,26,-30,-37,-55,10,-5,32,2,-11,-49,-110,-13,79,5,14,-37,-103,61,0,28,-27,-4,-2,36, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0018546314677223563, 0.014660309068858624, 0.029120473191142082, 0.027609435841441154, 0.0044793570414185524, 0.0045151705853641033, 0.0037432911340147257, 0.0084901843219995499, 0.0049555236473679543, 0.016328400000929832, 0.0016861233161762357, 0.012447950430214405, 0.035945884883403778, 0.0030128706712275743, 0.0045147566124796867, 0.14331822097301483, 0.0077507705427706242, 0.012881437316536903, 0.019922411069273949, 0.0028065505903214216, 0.01568964496254921, 0.0049067744985222816, 0.011457758955657482, 0.0046907141804695129, 0.005979564506560564, 0.028837772086262703, 0.004802667535841465, 0.01280456967651844, 0.028034454211592674, 0.01273938175290823, 0.0032357044983655214, 0.003051053499802947, 0.042850043624639511, 0.017844827845692635, 0.0079913260415196419, 0.0057934303767979145, 0.016876351088285446, 0.0034161750227212906, 0.0034962708596140146, 0.011670089326798916, 0.0065577281638979912, 0.010341808199882507, 0.0085671171545982361, 0.0065142242237925529, 0.027018863707780838, 0.0069557959213852882, 0.085889376699924469, 0.020131140947341919, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data36[48] = { -1796, -6211, 6913, 15056, 7733, 2602, 3705, 586, -696, -7176, 696, 4698, 15611, -8836, 349, 6440, -3910, 3712, 794, 4646, -33, 3941, -607, 789, 9938, 14197, 8647, -10583, 1324, -944, 52, -2419, 20285, 4338, 13115, -436, -12144, 1360, -2566, -4970, -10235, -8348, 43, 2448, 30665, -10474, 9645, -1024, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00052812084322795272, 0.00024335701891686767, 0.00014598671987187117, 7.9847741289995611e-05, 0.00032631529029458761, 0.0009395660599693656, 0.0010982155799865723, 0.00066767673706635833, 0.00070628809044137597, 0.00044018335756845772, 0.0021004052832722664, 0.00031143173691816628, 0.00010309011122444645, 0.00047937725321389735, 0.00061133940471336246, 9.0446956164669245e-05, 0.00042437543743290007, 0.00016745195898693055, 0.00035200995625928044, 0.00028392739477567375, 0.00020944440620951355, 0.0013392561813816428, 0.00054148840717971325, 0.00068640860263258219, 0.00034218505606986582, 0.00014222238678485155, 0.00053486105753108859, 0.00037720485124737024, 0.0012274732580408454, 0.00050500727957114577, 0.00099640863481909037, 0.0012685606488958001, 9.7991105576511472e-05, 0.00030591466929763556, 0.00026851505390368402, 0.00052616681205108762, 0.00025736057432368398, 0.00031303265132009983, 0.001372163649648428, 0.00035013598972000182, 0.00043502196785993874, 0.00029650449869222939, 0.00015557619917672127, 0.00052242592209950089, 3.6082215956412256e-05, 0.00034157148911617696, 6.8328088673297316e-05, 0.00049401191063225269, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -5,37,12,-28,83,-10,127,5, 
  /* [1][0][][] */ 127,30,88,5,-12,-4,-3,91, 
  /* [2][0][][] */ -88,25,0,127,4,-43,-22,45, 
  /* [3][0][][] */ 60,-16,-127,-5,-1,-63,12,123, 
  /* [4][0][][] */ -51,57,-127,-10,-4,12,-49,-33, 
  /* [5][0][][] */ 127,-8,-18,-34,6,-37,22,-126, 
  /* [6][0][][] */ -18,-7,-5,-19,-127,-44,73,19, 
  /* [7][0][][] */ -4,-84,-5,-19,-16,14,-127,-12, 
  /* [8][0][][] */ -39,50,24,11,127,-29,-71,5, 
  /* [9][0][][] */ 127,-11,44,7,-2,-13,40,91, 
  /* [10][0][][] */ 127,9,-12,-33,-13,16,-13,-127, 
  /* [11][0][][] */ -65,1,-18,127,1,-39,-25,20, 
  /* [12][0][][] */ -74,7,-71,-21,16,49,-47,-127, 
  /* [13][0][][] */ 87,-5,127,9,-5,8,29,47, 
  /* [14][0][][] */ -127,0,14,36,7,-18,3,124, 
  /* [15][0][][] */ 112,-20,-24,-122,-10,2,26,-127, 
  /* [16][0][][] */ 56,-64,121,72,-14,-127,12,36, 
  /* [17][0][][] */ 9,-106,-86,120,-2,59,4,127, 
  /* [18][0][][] */ 45,-23,-89,44,-17,-5,58,127, 
  /* [19][0][][] */ 5,8,-4,127,-15,2,-91,-24, 
  /* [20][0][][] */ 111,85,127,-115,2,-88,-28,-18, 
  /* [21][0][][] */ -6,1,-16,1,-127,-23,46,-3, 
  /* [22][0][][] */ 14,55,3,-9,3,127,-2,3, 
  /* [23][0][][] */ 118,33,-10,127,0,-32,-46,-111, 
  /* [24][0][][] */ -127,-7,-97,-40,24,-15,-45,-71, 
  /* [25][0][][] */ -11,13,-25,-27,14,-127,14,-6, 
  /* [26][0][][] */ -101,-37,-127,14,-2,-5,-12,-13, 
  /* [27][0][][] */ 127,11,84,-10,40,59,70,30, 
  /* [28][0][][] */ 5,-54,0,20,1,-127,-7,37, 
  /* [29][0][][] */ -9,-18,15,-127,-5,18,17,-6, 
  /* [30][0][][] */ -55,-10,127,-30,1,14,-16,-102, 
  /* [31][0][][] */ -17,21,-4,12,127,6,-36,8, 
  /* [32][0][][] */ -101,-7,-127,-11,33,-23,-15,-97, 
  /* [33][0][][] */ 41,-127,27,-87,35,-127,16,-6, 
  /* [34][0][][] */ -81,-109,-127,61,-17,-96,-10,-13, 
  /* [35][0][][] */ 47,-6,-125,-17,-1,7,-6,127, 
  /* [36][0][][] */ 79,41,84,43,19,127,28,17, 
  /* [37][0][][] */ -29,17,-4,127,2,-13,-26,13, 
  /* [38][0][][] */ -18,26,6,-29,127,22,-33,1, 
  /* [39][0][][] */ 42,23,61,47,-22,127,-117,19, 
  /* [40][0][][] */ 127,-22,89,-5,3,11,-3,84, 
  /* [41][0][][] */ 121,5,127,46,-64,-28,0,87, 
  /* [42][0][][] */ 127,-91,10,-101,-15,126,29,-8, 
  /* [43][0][][] */ -2,-70,-7,0,-49,-19,-127,2, 
  /* [44][0][][] */ -5,-121,76,120,20,45,13,-127, 
  /* [45][0][][] */ 125,23,127,10,7,39,32,44, 
  /* [46][0][][] */ 54,-15,8,-127,-21,-10,15,-69, 
  /* [47][0][][] */ -4,44,-3,-13,3,127,-4,1, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0049798446707427502, 0.0022947024554014206, 0.001376562169753015, 0.00075291359098628163, 0.0030769463628530502, 0.0088595123961567879, 0.010355476289987564, 0.0062957685440778732, 0.0066598490811884403, 0.0041506499983370304, 0.019805490970611572, 0.0029366039671003819, 0.0009720743983052671, 0.0045202234759926796, 0.0057645430788397789, 0.00085285742534324527, 0.0040015913546085358, 0.001578965806402266, 0.0033192306291311979, 0.0026772553101181984, 0.0019749279599636793, 0.012628336437046528, 0.0051058926619589329, 0.0064723980613052845, 0.0032265880145132542, 0.001341066905297339, 0.005043400451540947, 0.003556802636012435, 0.011574294418096542, 0.0047618984244763851, 0.0093955015763640404, 0.011961722746491432, 0.00092399399727582932, 0.0028845814522355795, 0.0025319268461316824, 0.0049614193849265575, 0.0024267469998449087, 0.0029516995418816805, 0.012938633561134338, 0.0033015604130923748, 0.004101981408894062, 0.0027958494611084461, 0.0014669849770143628, 0.004926145076751709, 0.00034023242187686265, 0.0032208026386797428, 0.0006442905287258327, 0.004658218938857317, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data38[8] = { 2573, -605, -3320, -8980, 1105, -573, -1226, 4402, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00029496120987460017, 0.00029560420080088079, 0.00036267354153096676, 0.00020265621424186975, 0.00018139205349143595, 0.00013634593051392585, 0.00030789131415076554, 0.00018227307009510696, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -23,-7,-26,9,-3,-127,10,38, 
  /* [1][0][][] */ -56,26,-105,127,4,54,-40,42, 
  /* [2][0][][] */ 13,-6,37,-8,-4,-127,20,79, 
  /* [3][0][][] */ 38,35,55,127,12,-29,-33,-5, 
  /* [4][0][][] */ 13,72,24,3,-127,-11,11,-21, 
  /* [5][0][][] */ 47,-7,127,-96,20,-66,-26,-53, 
  /* [6][0][][] */ 28,127,35,-23,37,-10,-52,-6, 
  /* [7][0][][] */ -16,-22,-34,-12,-7,-127,16,31, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.012535851448774338, 0.012563178315758705, 0.015413625165820122, 0.008612888865172863, 0.0077091618441045284, 0.0057947020977735519, 0.013085381127893925, 0.0077466052025556564, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data40[8] = { 21411, -443, 14507, 1117, 6819, -189, 394, 8938, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 8.6880150774959475e-05, 0.00043473832192830741, 0.00015532011457253247, 0.00067017629044130445, 0.00012542158947326243, 0.00022949780395720154, 0.00032294017728418112, 0.00010705585737014189, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ -26,-9,3,5,19,29,10,28, -7,5,4,-2,10,127,12,127, -37,-1,-25,-3,27,20,12,-2, 
  /* [0][1][][] */ 23,-127,-4,1,-13,-6,-88,-18, -127,102,-85,127,-127,-7,127,-70, -16,-3,-22,-66,11,4,64,-47, 
  /* [0][2][][] */ 25,-8,-1,-10,15,-22,10,8, 52,12,127,-27,2,-110,19,-6, -6,5,-28,-9,20,-17,21,-13, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.0036924064625054598, 0.018476378172636032, 0.0066011049784719944, 0.02848249115049839, 0.0053304173052310944, 0.0097536565735936165, 0.013724956661462784, 0.0045498739928007126, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data42[8] = { 66900, -22321, 87787, 17559, 24847, 625489, 22629, 27308, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 5.7647259382065386e-05, 3.817453034571372e-05, 4.8328940465580672e-05, 4.7384844947373495e-05, 8.9494344138074666e-05, 6.1734717746730894e-06, 5.4036586334405001e-06, 0.0001016872629406862, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data43[8*3*3*3] = { 
  /* [0][0][][] */ 5,-7,13, 3,-28,29, 7,-27,20, 
  /* [0][1][][] */ 35,25,27, 59,13,57, 19,-36,37, 
  /* [0][2][][] */ -23,-92,-11, -33,-127,-1, -11,-57,17, 
  /* [1][0][][] */ 38,84,27, 14,22,4, -23,-56,-20, 
  /* [1][1][][] */ 58,127,40, 11,12,2, -45,-112,-32, 
  /* [1][2][][] */ 35,53,13, 9,6,1, -29,-48,-4, 
  /* [2][0][][] */ 37,89,5, 50,127,11, 14,42,-3, 
  /* [2][1][][] */ -55,-88,-35, -87,-96,-41, -34,-7,-22, 
  /* [2][2][][] */ -6,7,2, -1,14,-4, -4,9,-10, 
  /* [3][0][][] */ 47,-26,-21, 81,-28,-43, 30,-13,-15, 
  /* [3][1][][] */ 80,-48,-41, 127,-47,-78, 58,-23,-30, 
  /* [3][2][][] */ 19,-14,-8, 41,-22,-22, 14,-7,-5, 
  /* [4][0][][] */ -13,-26,-5, 27,45,10, -16,-30,-4, 
  /* [4][1][][] */ -31,-63,-10, 63,127,18, -36,-64,-8, 
  /* [4][2][][] */ -13,-17,1, 19,23,-4, -14,-16,-3, 
  /* [5][0][][] */ -53,-56,-55, -79,-112,-91, -39,-33,-36, 
  /* [5][1][][] */ -49,-93,-70, -79,-127,-83, -52,-56,-47, 
  /* [5][2][][] */ 4,7,-14, -8,-11,-12, -21,-14,-15, 
  /* [6][0][][] */ -100,-5,45, 4,24,-2, 72,27,-7, 
  /* [6][1][][] */ -127,-33,55, 14,23,-18, 115,25,-16, 
  /* [6][2][][] */ -50,-12,26, 20,-1,11, 47,3,53, 
  /* [7][0][][] */ -2,18,-1, -13,24,-6, -4,22,-7, 
  /* [7][1][][] */ 19,84,-6, 24,127,-23, -1,60,-27, 
  /* [7][2][][] */ -28,-50,-21, -42,-52,-33, -20,3,-20, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant43_scale = { 8, { 0.014700050465762615, 0.0097345048561692238, 0.012323878705501556, 0.012083134613931179, 0.022821055725216866, 0.0015742351533845067, 0.0013779328437522054, 0.025930250063538551, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.10344433039426804, } };
const TfArray<1, int> quant46_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.10605166852474213, } };
const TfArray<1, int> quant47_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.094095207750797272, } };
const TfArray<1, int> quant51_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.082692719995975494, } };
const TfArray<1, int> quant54_zero = { 1, { -11 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.10560451447963715, } };
const TfArray<1, int> quant55_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.060947045683860779, } };
const TfArray<1, int> quant59_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.036821506917476654, } };
const TfArray<1, int> quant62_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.068979732692241669, } };
const TfArray<1, int> quant63_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.053181305527687073, } };
const TfArray<1, int> quant66_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.080178059637546539, } };
const TfArray<1, int> quant67_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.044004298746585846, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.13341338932514191, } };
const TfArray<1, int> quant70_zero = { 1, { -33 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,12,12,3 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 18432), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension48, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension50, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension51, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension56, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension58, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14976), (TfLiteIntArray*)&g0::tensor_dimension59, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension60, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension62, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension64, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8064), (TfLiteIntArray*)&g0::tensor_dimension66, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension67, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension69, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 432), (TfLiteIntArray*)&g0::tensor_dimension70, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_20_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_20_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_20_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_20_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_20_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
